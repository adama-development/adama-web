{"version":3,"sources":["app.js","app-config.js","account/app.js","alert/adama-alert-error.component.js","alert/adama-alert.component.js","alert/alert.service.js","crud/app.js","crud/btn-confirm-edit.component.js","crud/btn-create.component.js","crud/crud-action-dropdown.component.js","crud/crud-custom-filter.component.js","crud/crud-delete.controller.js","crud/crud-edit.controller.js","crud/crud-export-xls.controller.js","crud/crud-import-xls.controller.js","crud/crud-list.controller.js","crud/crud-search-field.component.js","crud/crud-view.controller.js","crud/modal-btn-cancel.component.js","crud/modal-btn-confirm-delete.component.js","crud/modal-btn-confirm-export-xls.component.js","crud/modal-btn-confirm-import-xls.component.js","directives/layoutFix.directive.js","directives/lazyControl.directive.js","directives/mainNavbarAutomaticClosing.directive.js","filters/min.filter.js","has-authority/has-any-authority.directive.js","has-authority/has-authority.directive.js","binary-file-definition/binary-file-definition.component.js","resources/user.resource.js","services/adama-resource-config.service.js","services/adama-token.service.js","services/adama.constant.js","services/auth.backend.service.js","services/auth.service.js","services/base64.service.js","services/binary-file.service.js","services/binary.service.js","services/language.provider.js","services/parse-links.service.js","services/principal.service.js","user/app.js","auth/accessDenied.controller.js","auth/app.js","auth/recoverPassword.controller.js","auth/resetPassword.controller.js","auth/signin.controller.js","interceptors/auth-expired.interceptor.js","interceptors/auth.interceptor.js","interceptors/error-handler.interceptor.js","interceptors/notification.interceptor.js","datasources/authorities.datasource.js","datasources/binary-file-url.datasource.js","datasources/language.datasource.js","datasources/principal-identity.datasource.js","account/password/app.js","account/password/password.controller.js","account/settings/app.js","account/settings/settings.controller.js","ark/ark-footer/ark-footer.component.js","ark/ark-header/app.js","ark/ark-header/ark-header.component.js","ark/language-selector/language-selector.component.js","ark/menu/main-navigation.component.js","ark/menu/menu.provider.js","ark/select-all/select-all.component.js","ark/user-info/user-info.component.js","ark/view-attribute/view-attribute.component.js"],"names":["angular","module","config","$urlRouterProvider","otherwise","run","$rootScope","additionalBodyClass","$on","event","toState","name","indexOf","$filter","translateFn","data","pageTitle","$translateProvider","useSanitizeValueStrategy","useLocalStorage","registerAvailableLanguageKeys","en_*","fr_*","determinePreferredLanguage","$stateProvider","state","abstract","url","template","resolve","authorize","Principal","ngTableDefaults","settings","extend","counts","params","page","count","translations","MENU_CATEGORY_USERS","PAGER_RESULT","FLAG_EN","FLAG_CN","FLAG_FR","FILEUPLOAD_DROPZONE_LABEL_MASS_IMPORT","FILEUPLOAD_DROPZONE_LABEL","FILEUPLOAD_DROPZONE_LABEL_DROP","FILEUPLOAD_RESET","FILEUPLOAD_UPLOADING","FILEUPLOAD_ERROR","$state","toStateParams","isAuthenticated","preventDefault","go","isIdentityResolved","toParams","fromState","fromParams","previousStateName","previousStateParams","$httpProvider","interceptors","push","logEnhancerProvider","prefixPattern","datetimePattern","logLevels","*","LEVEL","OFF","component","templateUrl","adamaConstant","adamaWebToolkitTemplateUrl","adamaAlertError","controller","$scope","$translate","AlertService","ctrl","this","alerts","addErrorAlert","message","key","add","type","msg","timeout","toast","isToast","scoped","cleanHttpErrorListener","httpResponse","i","stopPropagation","status","errorHeader","headers","entityKey","entityName","instant","fieldErrors","length","fieldError","convertedField","field","replace","fieldName","objectName","JSON","stringify","adamaAlert","get","provider","$get","$timeout","$sce","alertId","clear","closeAlertByIndex","index","thisAlerts","splice","closeAlert","id","extAlerts","map","e","factory","alertOptions","alert","trustAsHtml","position","close","addAlert","success","error","warning","info","showAsToast","CRUD_BACK_TO_LIST","CRUD_CANCEL","CRUD_CONFIRM_DELETE","CRUD_CONFIRM_EDIT","CRUD_CONFIRM_EXPORT","CRUD_CONFIRM_IMPORT","CRUD_CONFIRM_SAVE","CRUD_DELETE_MESSAGE","CRUD_DELETE_SUCCESS","CRUD_DELETE_ERROR","CRUD_EXPORT_XLS_MESSAGE","CRUD_EXPORT_XLS_SUCCESS","CRUD_EXPORT_XLS_ERROR","CRUD_IMPORT_XLS_MESSAGE","CRUD_IMPORT_XLS_SUCCESS","CRUD_IMPORT_XLS_ERROR","CRUD_NEW","CRUD_MASS_IMPORT","CRUD_MASS_EXPORT","CRUD_EDIT_SUCCESS","CRUD_NEW_SUCCESS","CRUD_SAVE_ERROR","CRUD_FORM_ERROR_REQUIRED","CRUD_FORM_ERROR_NUMBER","CRUD_FORM_ERROR_MIN","CRUD_FORM_ERROR_MAX","CRUD_FORM_ERROR_MINLENGTH","CRUD_FORM_ERROR_MAXLENGTH","CRUD_FORM_ERROR_EMAIL","CRUD_FORM_SEARCH","CRUD_FORM_SEARCH_SUBMIT","CRUD_ACTION_VIEW","CRUD_ACTION_EDIT","CRUD_ACTION_DELETE","btnConfirmEdit","bindings","entity","entityGenericResource","afterActionCallback","form","isEdition","save","resourceAction","update","$promise","then","newEntity","btnCreate","transclude","disableCreate","disableMassImport","disableMassExport","disableAdditionnalAction","crudActionDropdown","routeMapping","disableView","disableEdit","disableDelete","crudCustomFilter","tableParams","searchValue","labelKey","displayFiltered","filter","business","reload","title","EntityGenericResource","entityId","NgTableParams","total","getData","sort","sorting","sortValues","equals","hasOwnProperty","requestParams","size","search","$","query","entities","$metadata","totalItems","crudSearchField","modalBtnCancel","modalBtnConfirmDelete","confirmDelete","$delete","catch","modalBtnConfirmExportXls","loading","confirmExportXls","massExportXls","finally","modalBtnConfirmImportXls","file","confirmImportXls","massImportXls","directive","scope","addEvent","restrict","link","AdminLTE","layout","fix","translateFilter","element","attrs","additionalLabelAttributes","labelScreenOnly","labelContainer","isPlaceholderForced","wrap","after","next","eq","ngModel","placeholder","attr","addClass","before","prev","initLabelAndPlaceholder","label","lazyControlLabelKey","html","on","removeClass","Math","min","setVisible","setHidden","authorities","hasAnyAuthority","split","defineVisibility","reset","result","$watch","authority","hasAuthority","binaryFileDefinition","afterUploadCallback","filePattern","require","binaryFileService","isPicture","ongoingUpload","undefined","upload","isArray","$setValidity","uploadFile","resp","newFile","$setViewValue","resetFile","$resource","adamaResourceConfig","method","urlCreatePassword","apiBase","ParseLinks","binaryService","transformResponse","fromJson","links","parse","parseInt","interceptor","response","resource","delete","responseType","all","Accept","transformResponseToExcel","Content-Type","transformRequest","formData","window","FormData","append","$http","$q","$log","jwtHelper","localStorageService","log","getInstance","api","getPayload","getToken","token","tokenPayload","decodeToken","getUsername","setToken","set","setRefreshToken","isTokenExpired","debug","refreshAndGetToken","when","console","reject","refreshToken","Authorization","refresh_token","newToken","rejection","constant","password","arkFooter","arkHeader","languageSelector","mainNavigation","selectAll","userInfo","viewAttribute","resetPassword","signin","recoverPassword","accessDenied","users","userEdit","userCreate","userView","userDelete","usersImportXls","usersExportXls","userAuthorities","adamaTokenService","login","credentials","post","username","logout","authBackendService","deferred","defer","identity","account","langKey","use","err","promise","authenticate","previousStateNameParams","service","keyStr","encode","input","chr1","chr2","enc1","enc2","enc3","output","chr3","enc4","charCodeAt","isNaN","charAt","decode","String","fromCharCode","Upload","initUrlForBinaryFiles","binaryFileList","workingList","idList","forEach","binaryFile","urlList","disableProgress","FileSaver","saveFile","headersGetter","contentType","defaultFileName","filename","dataBlob","Blob","contentDisposition","substring","saveAs","transformResponseToPdf","languages","selectorData","code","cssCLass","setLanguages","newLanguages","setSelectorData","newSelectorData","getCurrent","language","storage","isUndefined","getAll","getSelectorData","header","Error","parts","p","section","trim","queryString","RegExp","$0","$1","$2","$3","isString","_identity","Password","PasswordResetInit","PasswordResetFinish","_authenticated","isDefined","_id","force","location","updateAccount","user","$emit","changePassword","newPassword","resetPasswordInit","mail","urlResetPassword","resetPasswordFinish","keyAndPassword","controllerAs","User","$stateParams","openModal","$uibModal","controllerName","resolveEntity","open","parent","onEnter","userexists","emailexists","USER_MENU","USER_TITLE_DELETE","USER_TITLE_VIEW","USER_TITLE_LIST","USER_TITLE_EDIT","USER_TITLE_NEW","USER_TITLE_IMPORT_XLS","USER_TITLE_EXPORT_XLS","USER_FORM_LOGIN","USER_FORM_FIRSTNAME","USER_FORM_LASTNAME","USER_FORM_EMAIL","USER_FORM_LANGUAGE","USER_FORM_AUTHORITY","USER_LIST_LOGIN","USER_LIST_MAIL","USER_LIST_LANGUAGE","USER_LIST_AUTHORITY","SIGNIN","SIGNIN_INTRO","SIGNIN_FORGET_PASSWORD","SIGNIN_USERNAME","SIGNIN_USERNAME_REQUIRED","SIGNIN_PASSWORD","SIGNIN_PASSWORD_REQUIRED","SIGNIN_SUBMIT","SIGNIN_ERROR","RECOVER","RECOVER_INTRO","RECOVER_MAIL","RECOVER_MAIL_REQUIRED","RECOVER_MAIL_EMAIL","RECOVER_SUBMIT","RECOVER_BACK_TO_LOGIN","RECOVER_SUCCESS","RECOVER_ERROR","RECOVER_ERROR_EMAIL_NOT_EXIST","ACCESS_DENIED","ACCESS_DENIED_INTRO","ACCESS_DENIED_BACK_TO_LOGIN","RESET_PASSWORD","RESET_PASSWORD_INTRO","RESET_PASSWORD_SUBMIT","RESET_PASSWORD_PASSWORD","RESET_PASSWORD_PASSWORD_REQUIRED","RESET_PASSWORD_PASSWORD_MINLENGTH","RESET_PASSWORD_PASSWORD_MAXLENGTH","RESET_PASSWORD_PASSWORD_CONFIRM","RESET_PASSWORD_PASSWORD_CONFIRM_REQUIRED","RESET_PASSWORD_PASSWORD_CONFIRM_MATCH","RESET_PASSWORD_ERROR","RESET_PASSWORD_MESSAGE_FOR_MOBILE_USER","recover","userEmail","recoverSuccess","recoverError","errorEmailNotExists","$location","resetError","messageForMobileUser","origin","Auth","userName","userPassword","authenticationError","$injector","getHttpService","getAdamaTokenService","responseError","request","alertKey","param","$parse","assign","updateOutput","copy","ACCOUNT_PASSWORD","ACCOUNT_PASSWORD_TITLE","ACCOUNT_PASSWORD_NEWPASSWORD","ACCOUNT_PASSWORD_NEWPASSWORD_PLACEHOLDER","ACCOUNT_PASSWORD_NEWPASSWORD_REQUIRED","ACCOUNT_PASSWORD_NEWPASSWORD_MINLENGTH","ACCOUNT_PASSWORD_NEWPASSWORD_MAXLENGTH","ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD","ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_PLACEHOLDER","ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_REQUIRED","ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_MINLENGTH","ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_MAXLENGTH","ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_PATTERN","ACCOUNT_PASSWORD_SUBMIT","ACCOUNT_PASSWORD_SAVE_SUCCESS","ACCOUNT_PASSWORD_SAVE_ERROR","ACCOUNT_SETTINGS","ACCOUNT_SETTINGS_TITLE","ACCOUNT_SETTINGS_FIRSTNAME","ACCOUNT_SETTINGS_FIRSTNAME_PLACEHOLDER","ACCOUNT_SETTINGS_FIRSTNAME_REQUIRED","ACCOUNT_SETTINGS_FIRSTNAME_MAXLENGTH","ACCOUNT_SETTINGS_LASTNAME","ACCOUNT_SETTINGS_LASTNAME_PLACEHOLDER","ACCOUNT_SETTINGS_LASTNAME_REQUIRED","ACCOUNT_SETTINGS_LASTNAME_MAXLENGTH","ACCOUNT_SETTINGS_EMAIL","ACCOUNT_SETTINGS_EMAIL_PLACEHOLDER","ACCOUNT_SETTINGS_EMAIL_REQUIRED","ACCOUNT_SETTINGS_EMAIL_EMAIL","ACCOUNT_SETTINGS_EMAIL_MAXLENGTH","ACCOUNT_SETTINGS_LANGUAGE","ACCOUNT_SETTINGS_SUBMIT","ACCOUNT_SETTINGS_SAVE_SUCCESS","ACCOUNT_SETTINGS_SAVE_ERROR","copyAccount","activated","email","firstName","lastName","settingsAccount","current","TOGGLE_NAVIGATION","USERINFO_PROFILE","USERINFO_PASSWORD","USERINFO_SIGNOUT","changeLanguage","updateCurrentLanguage","currentLanguage","menuService","translate","translateLabels","itemList","item","subItems","menuItems","getItems","updateMenuEntries","updateActiveStatus","active","path","addItem","newItem","menuItem","badge","value","entityList","isAllChecked","checkAll","isSelected","signout","valueKey"],"mappings":"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","file":"adama-web-min.js","sourcesContent":["'use strict';\n\nangular.module('adama-web', [ //\n\t'ngSanitize', //\n\t'ngMessages', //\n\t'ui.router', //\n\t'ui.bootstrap', //\n\t'pascalprecht.translate', //\n\t'ngCookies', //\n\t'ngResource', //\n\t'LocalStorageModule', //\n\t'ngTable', //\n\t'ngFileSaver', //\n\t'ngFileUpload', //\n\t'angular-jwt', //\n\t'angular-logger', //\n\t'angular-loading-bar' //\n]);\n","'use strict';\n\nangular.module('adama-web').config([\"$urlRouterProvider\", function($urlRouterProvider) {\n\t$urlRouterProvider.otherwise('/app/');\n}]);\n\nangular.module('adama-web').run([\"$rootScope\", function($rootScope) {\n\t// change body class depending on application main state (app or login)\n\t$rootScope.additionalBodyClass = 'sidebar-mini';\n\n\t$rootScope.$on('$stateChangeSuccess', function(event, toState) {\n\t\tif (toState && toState.name && toState.name.indexOf('auth') === 0) {\n\t\t\t$rootScope.additionalBodyClass = 'login-page';\n\t\t} else {\n\t\t\t$rootScope.additionalBodyClass = 'sidebar-mini';\n\t\t}\n\t});\n}]);\n\nangular.module('adama-web').run([\"$rootScope\", \"$filter\", function($rootScope, $filter) {\n\t// change page title depending on current page\n\tvar translateFn = $filter('translate');\n\t$rootScope.$on('$stateChangeSuccess', function(event, toState) {\n\t\tif (toState && toState.data && toState.data.pageTitle) {\n\t\t\t$rootScope.pageTitle = translateFn(toState.data.pageTitle);\n\t\t}\n\t});\n}]);\n\nangular.module('adama-web').config([\"$translateProvider\", function($translateProvider) {\n\t$translateProvider.useSanitizeValueStrategy('escapeParameters');\n\t$translateProvider.useLocalStorage();\n\t$translateProvider.registerAvailableLanguageKeys(['en', 'fr'], {\n\t\t'en_*': 'en',\n\t\t'fr_*': 'fr'\n\t});\n\t$translateProvider.determinePreferredLanguage();\n}]);\n\nangular.module('adama-web').config([\"$stateProvider\", function($stateProvider) {\n\t$stateProvider.state('app', {\n\t\tabstract: true,\n\t\turl: '/app',\n\t\ttemplate: '' + //\n\t\t\t'<div class=\"wrapper\">' + //\n\t\t\t'\t<ark-header></ark-header>' + //\n\t\t\t'\t<aside class=\"main-sidebar\">' + //\n\t\t\t'\t\t<section class=\"sidebar\">' + //\n\t\t\t'\t\t\t<main-navigation></main-navigation>' + //\n\t\t\t'\t\t</section>' + //\n\t\t\t'\t</aside>' + //\n\t\t\t'\t<adama-alert></adama-alert>' + //\n\t\t\t'\t<ui-view></ui-view>' + //\n\t\t\t'\t<ark-footer></ark-footer>' + //\n\t\t\t'\t<layout-fix add-event=\"true\"></layout-fix>' + //\n\t\t\t'</div>' + //\n\t\t\t'',\n\t\tresolve: {\n\t\t\tauthorize: [\"Principal\", function(Principal) {\n\t\t\t\treturn Principal.authorize();\n\t\t\t}]\n\t\t}\n\t});\n}]);\n\nangular.module('adama-web').run([\"ngTableDefaults\", function(ngTableDefaults) {\n\tngTableDefaults.settings = angular.extend({}, ngTableDefaults.settings, {\n\t\tcounts: [10, 20, 50]\n\t});\n\tngTableDefaults.params = angular.extend({}, ngTableDefaults.params, {\n\t\t// init : show first page\n\t\tpage: 1,\n\t\t// init : count per page\n\t\tcount: 20\n\t});\n}]);\n\nangular.module('adama-web').config([\"$translateProvider\", function($translateProvider) {\n\t$translateProvider.translations('fr', {\n\t\t'MENU_CATEGORY_USERS': 'Utilisateurs',\n\t\t'PAGER_RESULT': '{{ firstItemIdx }}-{{ lastItemIdx | min:total }} sur {{ total }} entrées',\n\t\t'FLAG_EN': 'Anglais',\n\t\t'FLAG_CN': 'Chinois',\n\t\t'FLAG_FR': 'Français',\n\t\t'FILEUPLOAD_DROPZONE_LABEL_MASS_IMPORT': 'Déposez un fichier XLS pour le téléverser ou cliquez sur la zone pour sélectionner un fichier XLS.',\n\t\t'FILEUPLOAD_DROPZONE_LABEL': 'Déposez un fichier pour le téléverser ou cliquez sur la zone pour sélectionner un fichier.',\n\t\t'FILEUPLOAD_DROPZONE_LABEL_DROP': 'Vous pouvez déposer le fichier.',\n\t\t'FILEUPLOAD_RESET': 'Retirer le fichier sélectionné et faire une nouvelle sélection.',\n\t\t'FILEUPLOAD_UPLOADING': 'Téléversement en cours',\n\t\t'FILEUPLOAD_ERROR': 'Erreur lors du téléversement'\n\t});\n\n\t$translateProvider.translations('en', {\n\t\t'MENU_CATEGORY_USERS': 'Users',\n\t\t'PAGER_RESULT': '{{ firstItemIdx }}-{{ lastItemIdx | min:total }} on {{ total }} entries',\n\t\t'FLAG_EN': 'English',\n\t\t'FLAG_CN': 'Chinese',\n\t\t'FLAG_FR': 'French',\n\t\t'FILEUPLOAD_DROPZONE_LABEL_MASS_IMPORT': 'Drop a XLS file on this area to upload it or click the area to select a XLS file.',\n\t\t'FILEUPLOAD_DROPZONE_LABEL': 'Drop a file on this area to upload it or click the area to select a file.',\n\t\t'FILEUPLOAD_DROPZONE_LABEL_DROP': 'You can now drop the file',\n\t\t'FILEUPLOAD_RESET': 'Remove selected file and start over.',\n\t\t'FILEUPLOAD_UPLOADING': 'Uploading ...',\n\t\t'FILEUPLOAD_ERROR': 'Error while uploading'\n\t});\n}]);\n\nangular.module('adama-web').run([\"$rootScope\", \"$state\", \"Principal\", function($rootScope, $state, Principal) {\n\t$rootScope.$on('$stateChangeStart', function(event, toState, toStateParams) {\n\t\tif (Principal.isAuthenticated() && toState.name.indexOf('auth.') === 0 && toState.name !== 'auth.accessDenied') {\n\t\t\tevent.preventDefault();\n\t\t\t$state.go('app.main');\n\t\t} else {\n\t\t\t$rootScope.toState = toState;\n\t\t\t$rootScope.toStateParams = toStateParams;\n\t\t\tif (Principal.isIdentityResolved()) {\n\t\t\t\tPrincipal.authorize();\n\t\t\t}\n\t\t}\n\t});\n\n\t$rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {\n\t\t// Remember previous state unless we've been redirected to login or we've just\n\t\t// reset the state memory after logout. If we're redirected to login, our\n\t\t// previousState is already set in the authExpiredInterceptor. If we're going\n\t\t// to login directly, we don't want to be sent to some previous state anyway\n\t\tif (toState.name !== 'auth.signin' && $rootScope.previousStateName) {\n\t\t\t$rootScope.previousStateName = fromState.name;\n\t\t\t$rootScope.previousStateParams = fromParams;\n\t\t}\n\t});\n}]);\n\nangular.module('adama-web').config([\"$httpProvider\", function($httpProvider) {\n\t$httpProvider.interceptors.push('errorHandlerInterceptor');\n\t$httpProvider.interceptors.push('authExpiredInterceptor');\n\t$httpProvider.interceptors.push('authInterceptor');\n\t$httpProvider.interceptors.push('notificationInterceptor');\n}]);\n\nangular.module('adama-web').config([\"logEnhancerProvider\", function(logEnhancerProvider) {\n\tlogEnhancerProvider.prefixPattern = '%s::[%s]>';\n\tlogEnhancerProvider.datetimePattern = 'DD/MM/YYYY HH:mm:ss';\n\tlogEnhancerProvider.logLevels = {\n\t\t'*': logEnhancerProvider.LEVEL.OFF\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').config([\"$stateProvider\", function($stateProvider) {\n\t$stateProvider.state('app.personal', {\n\t\tabstract: true,\n\t\turl: '/personal',\n\t\ttemplate: '<ui-view></ui-view>'\n\t});\n}]);\n","'use strict';\n\nangular.module('adama-web').component('adamaAlertError', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.adamaAlertError;\n\t}],\n\tcontroller: [\"$rootScope\", \"$scope\", \"$translate\", \"AlertService\", function($rootScope, $scope, $translate, AlertService) {\n\t\tvar ctrl = this;\n\t\tctrl.alerts = [];\n\n\t\tvar addErrorAlert = function(message, key, data) {\n\t\t\tkey = key && key !== null ? key : message;\n\t\t\tctrl.alerts.push(AlertService.add({\n\t\t\t\ttype: 'danger',\n\t\t\t\tmsg: key,\n\t\t\t\tparams: data,\n\t\t\t\ttimeout: 5000,\n\t\t\t\ttoast: AlertService.isToast(),\n\t\t\t\tscoped: true\n\t\t\t}, ctrl.alerts));\n\t\t};\n\n\t\tvar cleanHttpErrorListener = $rootScope.$on('Adama.httpError', function(event, httpResponse) {\n\t\t\tvar i;\n\t\t\tevent.stopPropagation();\n\t\t\tswitch (httpResponse.status) {\n\t\t\t\t// connection refused, server not reachable\n\t\t\t\tcase 0:\n\t\t\t\t\taddErrorAlert('Server not reachable', 'error.server.not.reachable');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 400:\n\t\t\t\t\tvar errorHeader = httpResponse.headers('X-Adama-error');\n\t\t\t\t\tvar entityKey = httpResponse.headers('X-Adama-params');\n\t\t\t\t\tif (errorHeader) {\n\t\t\t\t\t\tvar entityName = $translate.instant('global.menu.entities.' + entityKey);\n\t\t\t\t\t\taddErrorAlert(errorHeader, errorHeader, {\n\t\t\t\t\t\t\tentityName: entityName\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (httpResponse.data && httpResponse.data.fieldErrors) {\n\t\t\t\t\t\tfor (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n\t\t\t\t\t\t\tvar fieldError = httpResponse.data.fieldErrors[i];\n\t\t\t\t\t\t\t// convert 'something[14].other[4].id'\n\t\t\t\t\t\t\t// to 'something[].other[].id' so\n\t\t\t\t\t\t\t// translations can be written to it\n\t\t\t\t\t\t\tvar convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n\t\t\t\t\t\t\tvar fieldName = $translate.instant('Adama.' + fieldError.objectName + '.' + convertedField);\n\t\t\t\t\t\t\taddErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {\n\t\t\t\t\t\t\t\tfieldName: fieldName\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (httpResponse.data && httpResponse.data.message) {\n\t\t\t\t\t\taddErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\taddErrorAlert(httpResponse.data);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tif (httpResponse.data && httpResponse.data.message) {\n\t\t\t\t\t\taddErrorAlert(httpResponse.data.message);\n\t\t\t\t\t} else {\n\t\t\t\t\t\taddErrorAlert(JSON.stringify(httpResponse));\n\t\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t$scope.$on('$destroy', function() {\n\t\t\tif (!!cleanHttpErrorListener) {\n\t\t\t\tcleanHttpErrorListener();\n\t\t\t\tctrl.alerts = [];\n\t\t\t}\n\t\t});\n\t}]\n});\n","'use strict';\n\nangular.module('adama-web').component('adamaAlert', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.adamaAlert;\n\t}],\n\tcontroller: [\"AlertService\", function(AlertService) {\n\t\tvar ctrl = this;\n\t\tctrl.alerts = AlertService.get();\n\t}]\n});\n","'use strict';\n\nangular.module('adama-web')\n\t.provider('AlertService', function() {\n\t\tvar toast = false;\n\n\t\tthis.$get = ['$timeout', '$sce', '$translate', function($timeout, $sce, $translate) {\n\n\t\t\tvar alertId = 0; // unique id for each alert. Starts from 0.\n\t\t\tvar alerts = [];\n\t\t\tvar timeout = 5000; // default timeout\n\n\t\t\tvar isToast = function() {\n\t\t\t\treturn toast;\n\t\t\t};\n\n\t\t\tvar clear = function() {\n\t\t\t\talerts = [];\n\t\t\t};\n\n\t\t\tvar get = function() {\n\t\t\t\treturn alerts;\n\t\t\t};\n\n\t\t\tvar closeAlertByIndex = function(index, thisAlerts) {\n\t\t\t\treturn thisAlerts.splice(index, 1);\n\t\t\t};\n\n\t\t\tvar closeAlert = function(id, extAlerts) {\n\t\t\t\tvar thisAlerts = extAlerts ? extAlerts : alerts;\n\t\t\t\treturn closeAlertByIndex(thisAlerts.map(function(e) {\n\t\t\t\t\treturn e.id;\n\t\t\t\t}).indexOf(id), thisAlerts);\n\t\t\t};\n\n\t\t\tvar factory = function(alertOptions) {\n\t\t\t\tvar alert = {\n\t\t\t\t\ttype: alertOptions.type,\n\t\t\t\t\tmsg: $sce.trustAsHtml(alertOptions.msg),\n\t\t\t\t\tid: alertOptions.alertId,\n\t\t\t\t\ttimeout: alertOptions.timeout,\n\t\t\t\t\ttoast: alertOptions.toast,\n\t\t\t\t\tposition: alertOptions.position ? alertOptions.position : 'top right',\n\t\t\t\t\tscoped: alertOptions.scoped,\n\t\t\t\t\tclose: function(alerts) {\n\t\t\t\t\t\treturn closeAlert(this.id, alerts);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (!alert.scoped) {\n\t\t\t\t\talerts.push(alert);\n\t\t\t\t}\n\t\t\t\treturn alert;\n\t\t\t};\n\n\t\t\tvar addAlert = function(alertOptions, extAlerts) {\n\t\t\t\talertOptions.alertId = alertId++;\n\t\t\t\talertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params);\n\t\t\t\tvar alert = factory(alertOptions);\n\t\t\t\tif (alertOptions.timeout && alertOptions.timeout > 0) {\n\t\t\t\t\t$timeout(function() {\n\t\t\t\t\t\tcloseAlert(alertOptions.alertId, extAlerts);\n\t\t\t\t\t}, alertOptions.timeout);\n\t\t\t\t}\n\t\t\t\treturn alert;\n\t\t\t};\n\n\t\t\tvar success = function(msg, params, position) {\n\t\t\t\treturn addAlert({\n\t\t\t\t\ttype: 'success',\n\t\t\t\t\tmsg: msg,\n\t\t\t\t\tparams: params,\n\t\t\t\t\ttimeout: timeout,\n\t\t\t\t\ttoast: toast,\n\t\t\t\t\tposition: position\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tvar error = function(msg, params, position) {\n\t\t\t\treturn addAlert({\n\t\t\t\t\ttype: 'danger',\n\t\t\t\t\tmsg: msg,\n\t\t\t\t\tparams: params,\n\t\t\t\t\ttimeout: timeout,\n\t\t\t\t\ttoast: toast,\n\t\t\t\t\tposition: position\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tvar warning = function(msg, params, position) {\n\t\t\t\treturn addAlert({\n\t\t\t\t\ttype: 'warning',\n\t\t\t\t\tmsg: msg,\n\t\t\t\t\tparams: params,\n\t\t\t\t\ttimeout: timeout,\n\t\t\t\t\ttoast: toast,\n\t\t\t\t\tposition: position\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tvar info = function(msg, params, position) {\n\t\t\t\treturn addAlert({\n\t\t\t\t\ttype: 'info',\n\t\t\t\t\tmsg: msg,\n\t\t\t\t\tparams: params,\n\t\t\t\t\ttimeout: timeout,\n\t\t\t\t\ttoast: toast,\n\t\t\t\t\tposition: position\n\t\t\t\t});\n\t\t\t};\n\n\t\t\treturn {\n\t\t\t\tfactory: factory,\n\t\t\t\tisToast: isToast,\n\t\t\t\tadd: addAlert,\n\t\t\t\tcloseAlert: closeAlert,\n\t\t\t\tcloseAlertByIndex: closeAlertByIndex,\n\t\t\t\tclear: clear,\n\t\t\t\tget: get,\n\t\t\t\tsuccess: success,\n\t\t\t\terror: error,\n\t\t\t\tinfo: info,\n\t\t\t\twarning: warning\n\t\t\t};\n\t\t}];\n\n\t\tthis.showAsToast = function(isToast) {\n\t\t\ttoast = isToast;\n\t\t};\n\n\t});\n","'use strict';\n\nangular.module('adama-web').config([\"$translateProvider\", function($translateProvider) {\n\t$translateProvider.translations('fr', {\n\t\t'CRUD_BACK_TO_LIST': 'Retour à la liste',\n\t\t'CRUD_CANCEL': 'Annuler',\n\t\t'CRUD_CONFIRM_DELETE': 'Confirmer la suppression',\n\t\t'CRUD_CONFIRM_EDIT': 'Editer',\n\t\t'CRUD_CONFIRM_EXPORT': 'Confirmer l\\'export',\n\t\t'CRUD_CONFIRM_IMPORT': 'Confirmer l\\'import',\n\t\t'CRUD_CONFIRM_SAVE': 'Créer',\n\t\t'CRUD_DELETE_MESSAGE': 'Etes-vous certain de vouloir supprimer ?',\n\t\t'CRUD_DELETE_SUCCESS': 'Suppression avec succès.',\n\t\t'CRUD_DELETE_ERROR': 'Erreur, impossible de supprimer.',\n\t\t'CRUD_EXPORT_XLS_MESSAGE': 'Vous vous apprétez à exporter toutes les données dans une feuille de calcul Excel (XLS).',\n\t\t'CRUD_EXPORT_XLS_SUCCESS': 'Exportation avec succès.',\n\t\t'CRUD_EXPORT_XLS_ERROR': 'Erreur, impossible d\\'exporter.',\n\t\t'CRUD_IMPORT_XLS_MESSAGE': 'Sélectionnez un fichier Excel puis validez pour un import massif de données.',\n\t\t'CRUD_IMPORT_XLS_SUCCESS': 'Importation avec succès.',\n\t\t'CRUD_IMPORT_XLS_ERROR': 'Erreur, impossible d\\'importer.',\n\t\t'CRUD_NEW': 'Nouveau',\n\t\t'CRUD_MASS_IMPORT': 'Import massif',\n\t\t'CRUD_MASS_EXPORT': 'Export massif',\n\t\t'CRUD_EDIT_SUCCESS': 'Enregistrement avec succès.',\n\t\t'CRUD_NEW_SUCCESS': 'Création avec succès.',\n\t\t'CRUD_SAVE_ERROR': 'Erreur, impossible de sauvegarder.',\n\t\t'CRUD_FORM_ERROR_REQUIRED': 'Le champs est obligatoire.',\n\t\t'CRUD_FORM_ERROR_NUMBER': 'Le champs est un nombre.',\n\t\t'CRUD_FORM_ERROR_MIN': 'Le champs doit être supérieur à {{ min }}.',\n\t\t'CRUD_FORM_ERROR_MAX': 'Le champs doit être inférieur à {{ max }}.',\n\t\t'CRUD_FORM_ERROR_MINLENGTH': 'Le champs doit dépasser {{ minlength }} caractères.',\n\t\t'CRUD_FORM_ERROR_MAXLENGTH': 'Le champs ne doit pas dépasser {{ maxlength }} caractères.',\n\t\t'CRUD_FORM_ERROR_EMAIL': 'Le format est invalide.',\n\t\t'CRUD_FORM_SEARCH': 'Recherche',\n\t\t'CRUD_FORM_SEARCH_SUBMIT': 'Rechercher',\n\t\t'CRUD_ACTION_VIEW': 'Détails',\n\t\t'CRUD_ACTION_EDIT': 'Editer',\n\t\t'CRUD_ACTION_DELETE': 'Supprimer'\n\t});\n\n\t$translateProvider.translations('en', {\n\t\t'CRUD_BACK_TO_LIST': 'Back to list',\n\t\t'CRUD_CANCEL': 'Cancel',\n\t\t'CRUD_CONFIRM_DELETE': 'Confirm delete',\n\t\t'CRUD_CONFIRM_EDIT': 'Edit',\n\t\t'CRUD_CONFIRM_EXPORT': 'Confirm export',\n\t\t'CRUD_CONFIRM_IMPORT': 'Confirm import',\n\t\t'CRUD_CONFIRM_SAVE': 'Save',\n\t\t'CRUD_DELETE_MESSAGE': 'Are you sure you want to delete ?',\n\t\t'CRUD_DELETE_SUCCESS': 'Delete successfull.',\n\t\t'CRUD_DELETE_ERROR': 'Error, impossible to delete.',\n\t\t'CRUD_EXPORT_XLS_MESSAGE': 'You\\'re about to export all the data into an Excel spreadsheet (XLS).',\n\t\t'CRUD_EXPORT_XLS_SUCCESS': 'Export successfull.',\n\t\t'CRUD_EXPORT_XLS_ERROR': 'Error, impossible to export.',\n\t\t'CRUD_IMPORT_XLS_MESSAGE': 'Select an Excel file and submit in order to mass import data.',\n\t\t'CRUD_IMPORT_XLS_SUCCESS': 'Import successfull.',\n\t\t'CRUD_IMPORT_XLS_ERROR': 'Error, impossible to import.',\n\t\t'CRUD_NEW': 'New',\n\t\t'CRUD_MASS_IMPORT': 'Mass import',\n\t\t'CRUD_MASS_EXPORT': 'Mass export',\n\t\t'CRUD_EDIT_SUCCESS': 'Save successfull.',\n\t\t'CRUD_NEW_SUCCESS': 'Creation successful.',\n\t\t'CRUD_SAVE_ERROR': 'Error, impossible to save.',\n\t\t'CRUD_FORM_ERROR_REQUIRED': 'This field is required.',\n\t\t'CRUD_FORM_ERROR_NUMBER': 'This field is a number.',\n\t\t'CRUD_FORM_ERROR_MIN': 'This field must be greater than {{ min }}.',\n\t\t'CRUD_FORM_ERROR_MINLENGTH': 'This field must be lower than {{ max }}.',\n\t\t'CRUD_FORM_ERROR_MAX': 'This field must be longer than {{ minlength }} characters.',\n\t\t'CRUD_FORM_ERROR_MAXLENGTH': 'This field cannot be longer than {{ maxlength }} characters.',\n\t\t'CRUD_FORM_ERROR_EMAIL': 'Format is invalid.',\n\t\t'CRUD_FORM_SEARCH': 'Search',\n\t\t'CRUD_FORM_SEARCH_SUBMIT': 'Search',\n\t\t'CRUD_ACTION_VIEW': 'View details',\n\t\t'CRUD_ACTION_EDIT': 'Edit',\n\t\t'CRUD_ACTION_DELETE': 'Delete'\n\t});\n}]);\n","'use strict';\n\nangular.module('adama-web').component('btnConfirmEdit', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.btnConfirmEdit;\n\t}],\n\tbindings: {\n\t\tentity: '<',\n\t\tentityGenericResource: '<',\n\t\tafterActionCallback: '&',\n\t\tform: '<'\n\t},\n\tcontroller: [\"AlertService\", function(AlertService) {\n\t\tvar ctrl = this;\n\t\tctrl.isEdition = !!ctrl.entity && !!ctrl.entity.id;\n\t\tctrl.save = function() {\n\t\t\tvar resourceAction;\n\t\t\tif (ctrl.isEdition) {\n\t\t\t\tresourceAction = ctrl.entityGenericResource.update;\n\t\t\t} else {\n\t\t\t\tresourceAction = ctrl.entityGenericResource.save;\n\t\t\t}\n\t\t\tresourceAction(ctrl.entity).$promise.then(function(newEntity) {\n\t\t\t\tif (ctrl.isEdition) {\n\t\t\t\t\tAlertService.success('CRUD_EDIT_SUCCESS');\n\t\t\t\t} else {\n\t\t\t\t\tAlertService.success('CRUD_NEW_SUCCESS');\n\t\t\t\t}\n\t\t\t\tctrl.afterActionCallback({\n\t\t\t\t\tnewEntity: newEntity\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t}]\n});\n","'use strict';\n\nangular.module('adama-web').component('btnCreate', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.btnCreate;\n\t}],\n\ttransclude: true,\n\tbindings: {\n\t\tdisableCreate: '<',\n\t\tdisableMassImport: '<',\n\t\tdisableMassExport: '<',\n\t\tdisableAdditionnalAction: '<'\n\t}\n});\n","'use strict';\n\nangular.module('adama-web').component('crudActionDropdown', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.crudActionDropdown;\n\t}],\n\ttransclude: true,\n\tbindings: {\n\t\trouteMapping: '<',\n\t\tdisableView: '<',\n\t\tdisableEdit: '<',\n\t\tdisableDelete: '<'\n\t}\n});\n","'use strict';\n\nangular.module('adama-web').component('crudCustomFilter', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.crudCustomFilter;\n\t}],\n\tbindings: {\n\t\ttableParams: '<',\n\t\tsearchValue: '<',\n\t\tlabelKey: '@'\n\t},\n\tcontroller: function() {\n\t\tvar ctrl = this;\n\t\tctrl.displayFiltered = function() {\n\t\t\tctrl.tableParams.filter({\n\t\t\t\tbusiness: ctrl.searchValue\n\t\t\t});\n\t\t\tctrl.tableParams.page(1);\n\t\t\tctrl.tableParams.reload();\n\t\t};\n\t}\n});\n","'use strict';\n\nangular.module('adama-web').controller('CrudDeleteCtrl', [\"entity\", \"title\", function(entity, title) {\n\tvar ctrl = this;\n\tctrl.entity = entity;\n\tctrl.title = title;\n}]);\n","'use strict';\n\nangular.module('adama-web').controller('CrudEditCtrl', [\"$state\", \"entity\", \"EntityGenericResource\", function($state, entity, EntityGenericResource) {\n\tvar ctrl = this;\n\tctrl.isEdition = !!entity && !!entity.id;\n\tctrl.entity = entity;\n\tctrl.entityGenericResource = EntityGenericResource;\n\tctrl.afterActionCallback = function(newEntity) {\n\t\tif (ctrl.isEdition) {\n\t\t\tctrl.entity = newEntity;\n\t\t} else {\n\t\t\t$state.go('^.edit', {\n\t\t\t\tentityId: newEntity.id\n\t\t\t});\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').controller('CrudExportXlsCtrl', [\"EntityGenericResource\", \"title\", function(EntityGenericResource, title) {\n\tvar ctrl = this;\n\tctrl.entityGenericResource = EntityGenericResource;\n\tctrl.title = title;\n}]);\n","'use strict';\n\nangular.module('adama-web').controller('CrudImportXlsCtrl', [\"EntityGenericResource\", \"title\", function(EntityGenericResource, title) {\n\tvar ctrl = this;\n\tctrl.entityGenericResource = EntityGenericResource;\n\tctrl.title = title;\n}]);\n","'use strict';\n\nangular.module('adama-web').controller('CrudListCtrl', [\"EntityGenericResource\", \"NgTableParams\", function(EntityGenericResource, NgTableParams) {\n\t// TODO filter search results\n\tvar ctrl = this;\n\n\t// search data\n\tctrl.tableParams = new NgTableParams({}, {\n\t\ttotal: 0,\n\t\tgetData: function(params) {\n\t\t\tvar sort = params.sorting();\n\t\t\tvar sortValues = [];\n\t\t\tif (!angular.equals({}, sort)) {\n\t\t\t\tfor (var key in sort) {\n\t\t\t\t\tif (sort.hasOwnProperty(key)) {\n\t\t\t\t\t\tsortValues.push(key + ',' + sort[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar requestParams = angular.extend({}, {\n\t\t\t\tpage: params.page() - 1,\n\t\t\t\tsize: params.count(),\n\t\t\t\tsort: sortValues,\n\t\t\t\tsearch: params.filter().$\n\t\t\t}, params.filter().business);\n\t\t\treturn EntityGenericResource.query(requestParams).$promise.then(function(entities) {\n\t\t\t\tparams.total(entities.$metadata.totalItems);\n\t\t\t\treturn entities;\n\t\t\t});\n\t\t}\n\t});\n}]);\n","'use strict';\n\nangular.module('adama-web').component('crudSearchField', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.crudSearchField;\n\t}],\n\tbindings: {\n\t\ttableParams: '<'\n\t},\n\tcontroller: function() {\n\t\tvar ctrl = this;\n\t\tctrl.search = function() {\n\t\t\tctrl.tableParams.filter({\n\t\t\t\t$: ctrl.searchValue\n\t\t\t});\n\t\t\tctrl.tableParams.page(1);\n\t\t\tctrl.tableParams.reload();\n\t\t};\n\t}\n});\n","'use strict';\n\nangular.module('adama-web').controller('CrudViewCtrl', [\"entity\", function(entity) {\n\tvar ctrl = this;\n\tctrl.entity = entity;\n}]);\n","'use strict';\n\nangular.module('adama-web').component('modalBtnCancel', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.modalBtnCancel;\n\t}],\n\tbindings: {\n\t\tafterActionCallback: '&'\n\t}\n});\n","'use strict';\n\nangular.module('adama-web').component('modalBtnConfirmDelete', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.modalBtnConfirmDelete;\n\t}],\n\tbindings: {\n\t\tentity: '<',\n\t\tafterActionCallback: '&'\n\t},\n\tcontroller: [\"AlertService\", function(AlertService) {\n\t\tvar ctrl = this;\n\t\tctrl.confirmDelete = function() {\n\t\t\tctrl.entity.$delete().then(function() {\n\t\t\t\tAlertService.success('CRUD_DELETE_SUCCESS');\n\t\t\t\tctrl.afterActionCallback();\n\t\t\t}).catch(function() {\n\t\t\t\tAlertService.error('CRUD_DELETE_ERROR');\n\t\t\t});\n\t\t};\n\t}]\n});\n","'use strict';\n\nangular.module('adama-web').component('modalBtnConfirmExportXls', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.modalBtnConfirmExportXls;\n\t}],\n\tbindings: {\n\t\tentityGenericResource: '<',\n\t\tafterActionCallback: '&'\n\t},\n\tcontroller: [\"AlertService\", function(AlertService) {\n\t\tvar ctrl = this;\n\t\tctrl.loading = false;\n\t\tctrl.confirmExportXls = function() {\n\t\t\tctrl.loading = true;\n\t\t\tctrl.entityGenericResource.massExportXls().$promise.then(function() {\n\t\t\t\tAlertService.success('CRUD_EXPORT_XLS_SUCCESS');\n\t\t\t\tctrl.afterActionCallback();\n\t\t\t}).catch(function() {\n\t\t\t\tAlertService.error('CRUD_EXPORT_XLS_ERROR');\n\t\t\t}).finally(function() {\n\t\t\t\tctrl.loading = false;\n\t\t\t});\n\t\t};\n\t}]\n});\n","'use strict';\n\nangular.module('adama-web').component('modalBtnConfirmImportXls', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.modalBtnConfirmImportXls;\n\t}],\n\tbindings: {\n\t\tentityGenericResource: '<',\n\t\tafterActionCallback: '&',\n\t\tfile: '<'\n\t},\n\tcontroller: [\"AlertService\", function(AlertService) {\n\t\tvar ctrl = this;\n\t\tctrl.loading = false;\n\t\tctrl.confirmImportXls = function() {\n\t\t\tvar file = ctrl.file;\n\t\t\tctrl.loading = true;\n\t\t\tctrl.entityGenericResource.massImportXls({\n\t\t\t\tfile: file\n\t\t\t}).$promise.then(function() {\n\t\t\t\tAlertService.success('CRUD_IMPORT_XLS_SUCCESS');\n\t\t\t\tctrl.afterActionCallback();\n\t\t\t}, function() {\n\t\t\t\tAlertService.error('CRUD_IMPORT_XLS_ERROR');\n\t\t\t}).finally(function() {\n\t\t\t\tctrl.loading = false;\n\t\t\t});\n\t\t};\n\t}]\n});\n","'use strict';\n\nangular.module('adama-web').directive('layoutFix', [\"$rootScope\", \"$timeout\", function($rootScope, $timeout) {\n\treturn {\n\t\tscope: {\n\t\t\taddEvent: '='\n\t\t},\n\t\trestrict: 'E',\n\t\tlink: function postLink(scope) {\n\t\t\tif (scope.addEvent) {\n\t\t\t\t$rootScope.$on('$viewContentLoaded', function() {\n\t\t\t\t\t$.AdminLTE.layout.fix();\n\t\t\t\t});\n\t\t\t}\n\t\t\t$timeout(function() {\n\t\t\t\t$.AdminLTE.layout.fix();\n\t\t\t}, 0);\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').directive('lazyControl', [\"$rootScope\", \"$filter\", function($rootScope, $filter) {\n\tvar translateFilter = $filter('translate');\n\treturn {\n\t\tlink: function postLink(scope, element, attrs) {\n\t\t\tvar id, additionalLabelAttributes, labelScreenOnly, labelContainer;\n\t\t\tvar isPlaceholderForced = false;\n\t\t\tif (attrs.type === 'checkbox') {\n\t\t\t\telement.wrap('<div class=\"checkbox\"><label></label></div>');\n\t\t\t\telement.after('<span></span>');\n\t\t\t\tlabelContainer = element.next().eq(0);\n\t\t\t} else {\n\t\t\t\tid = attrs.ngModel.replace(/\\./g, '_');\n\t\t\t\tadditionalLabelAttributes = ' for=\"' + id + '\"';\n\t\t\t\tlabelScreenOnly = attrs.labelScreenOnly || false;\n\t\t\t\tif (labelScreenOnly) {\n\t\t\t\t\tadditionalLabelAttributes += ' class=\"sr-only\"';\n\t\t\t\t}\n\t\t\t\tif (attrs.placeholder) {\n\t\t\t\t\tisPlaceholderForced = true;\n\t\t\t\t}\n\t\t\t\telement.attr('id', id);\n\t\t\t\telement.addClass('form-control');\n\t\t\t\telement.wrap('<div class=\"form-group\"></div>');\n\t\t\t\telement.before('<label' + additionalLabelAttributes + '></label>');\n\t\t\t\tlabelContainer = element.prev().eq(0);\n\t\t\t}\n\t\t\tvar initLabelAndPlaceholder = function() {\n\t\t\t\tvar label = translateFilter(attrs.lazyControlLabelKey);\n\t\t\t\tlabelContainer.html(label);\n\t\t\t\tif (!isPlaceholderForced) {\n\t\t\t\t\telement.attr('placeholder', label);\n\t\t\t\t}\n\t\t\t};\n\t\t\tinitLabelAndPlaceholder();\n\t\t\t$rootScope.$on('$translateChangeSuccess', function() {\n\t\t\t\tinitLabelAndPlaceholder();\n\t\t\t});\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').directive('mainNavbarAutomaticClosing', function() {\n\treturn {\n\t\tscope: {},\n\t\trestrict: 'E',\n\t\tlink: function postLink() {\n\t\t\t$('.sidebar-menu').on('click', 'a', function() {\n\t\t\t\t$('body').removeClass('sidebar-open');\n\t\t\t});\n\t\t}\n\t};\n});\n","'use strict';\n\nangular.module('adama-web').filter('min', function() {\n\treturn Math.min;\n});\n","'use strict';\n\nangular.module('adama-web').directive('hasAnyAuthority', [\"Principal\", function(Principal) {\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element, attrs) {\n\t\t\tvar setVisible = function() {\n\t\t\t\telement.removeClass('hidden');\n\t\t\t};\n\t\t\tvar setHidden = function() {\n\t\t\t\telement.addClass('hidden');\n\t\t\t};\n\t\t\tvar authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\t\t\tvar defineVisibility = function(reset) {\n\t\t\t\tvar result;\n\t\t\t\tif (reset) {\n\t\t\t\t\tsetVisible();\n\t\t\t\t}\n\n\t\t\t\tresult = Principal.hasAnyAuthority(authorities);\n\t\t\t\tif (result) {\n\t\t\t\t\tsetVisible();\n\t\t\t\t} else {\n\t\t\t\t\tsetHidden();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (authorities.length > 0) {\n\t\t\t\tdefineVisibility(true);\n\n\t\t\t\tscope.$watch(function() {\n\t\t\t\t\treturn Principal.isAuthenticated();\n\t\t\t\t}, function() {\n\t\t\t\t\tdefineVisibility(true);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').directive('hasAuthority', [\"Principal\", function(Principal) {\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element, attrs) {\n\t\t\tvar setVisible = function() {\n\t\t\t\telement.removeClass('hidden');\n\t\t\t};\n\t\t\tvar setHidden = function() {\n\t\t\t\telement.addClass('hidden');\n\t\t\t};\n\t\t\tvar authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\t\t\tvar defineVisibility = function(reset) {\n\n\t\t\t\tif (reset) {\n\t\t\t\t\tsetVisible();\n\t\t\t\t}\n\n\t\t\t\tPrincipal.hasAuthority(authority).then(function(result) {\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tsetVisible();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetHidden();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tif (authority.length > 0) {\n\t\t\t\tdefineVisibility(true);\n\n\t\t\t\tscope.$watch(function() {\n\t\t\t\t\treturn Principal.isAuthenticated();\n\t\t\t\t}, function() {\n\t\t\t\t\tdefineVisibility(true);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').component('binaryFileDefinition', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.binaryFileDefinition;\n\t}],\n\tbindings: {\n\t\tafterUploadCallback: '&?',\n\t\tfilePattern: '@',\n\t\tlabelKey: '@'\n\t},\n\trequire: {\n\t\tngModel: 'ngModel'\n\t},\n\tcontroller: [\"binaryFileService\", function(binaryFileService) {\n\t\tvar ctrl = this;\n\t\tctrl.isPicture = ctrl.filePattern === 'image/*';\n\t\tctrl.ongoingUpload = undefined;\n\t\tctrl.error = false;\n\t\tctrl.upload = function(file) {\n\t\t\tif (angular.isArray(file)) {\n\t\t\t\tfile = file[0];\n\t\t\t}\n\t\t\tctrl.ngModel.$setValidity('loading', false);\n\t\t\tctrl.error = false;\n\t\t\tctrl.ongoingUpload = binaryFileService.uploadFile(file, ctrl.isPicture);\n\t\t\tctrl.ongoingUpload.then(function(resp) {\n\t\t\t\tvar newFile = resp.data;\n\t\t\t\tif (ctrl.afterUploadCallback) {\n\t\t\t\t\treturn ctrl.afterUploadCallback({\n\t\t\t\t\t\tnewFile: newFile\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn newFile;\n\t\t\t}).then(function(newFile) {\n\t\t\t\tctrl.ngModel.$setViewValue(newFile);\n\t\t\t}, function() {\n\t\t\t\tctrl.error = true;\n\t\t\t\tctrl.ngModel.$setViewValue(undefined);\n\t\t\t}).finally(function() {\n\t\t\t\tctrl.ngModel.$setValidity('loading', true);\n\t\t\t\tctrl.ongoingUpload = undefined;\n\t\t\t});\n\t\t};\n\t\tctrl.resetFile = function() {\n\t\t\tctrl.ngModel.$setViewValue(undefined);\n\t\t};\n\t}]\n});\n","'use strict';\n\nangular.module('adama-web').factory('User', [\"$resource\", \"adamaConstant\", \"adamaResourceConfig\", function($resource, adamaConstant, adamaResourceConfig) {\n\tvar config = angular.extend({}, adamaResourceConfig, {\n\t\tsave: {\n\t\t\tmethod: 'POST',\n\t\t\tparams: {\n\t\t\t\turlCreatePassword: '@urlCreatePassword'\n\t\t\t}\n\t\t}\n\t});\n\treturn $resource(adamaConstant.apiBase + 'users/:id', {}, config);\n}]);\n","'use strict';\n\nangular.module('adama-web').factory('adamaResourceConfig', [\"ParseLinks\", \"binaryService\", function(ParseLinks, binaryService) {\n\treturn {\n\t\t'query': {\n\t\t\tmethod: 'GET',\n\t\t\tisArray: true,\n\t\t\ttransformResponse: function(data, headers, status) {\n\t\t\t\tdata = angular.fromJson(data);\n\t\t\t\tif (status === 200) {\n\t\t\t\t\tdata.$metadata = {\n\t\t\t\t\t\tlinks: ParseLinks.parse(headers('link')),\n\t\t\t\t\t\ttotalItems: parseInt(headers('X-Total-Count'), 10)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t},\n\t\t\tinterceptor: {\n\t\t\t\tresponse: function(response) {\n\t\t\t\t\tresponse.resource.$metadata = response.data.$metadata;\n\t\t\t\t\treturn response.resource;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'get': {\n\t\t\tmethod: 'GET'\n\t\t},\n\t\t'save': {\n\t\t\tmethod: 'POST'\n\t\t},\n\t\t'update': {\n\t\t\tmethod: 'PUT'\n\t\t},\n\t\t'delete': {\n\t\t\tmethod: 'DELETE',\n\t\t\tparams: {\n\t\t\t\tid: '@id'\n\t\t\t}\n\t\t},\n\t\t'massExportXls': {\n\t\t\tmethod: 'GET',\n\t\t\tresponseType: 'arraybuffer',\n\t\t\tparams: {\n\t\t\t\tall: true\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/vnd.ms-excel'\n\t\t\t},\n\t\t\ttransformResponse: binaryService.transformResponseToExcel\n\t\t},\n\t\t'massImportXls': {\n\t\t\tmethod: 'POST',\n\t\t\tparams: {\n\t\t\t\tmethod: 'import-xls'\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\t'Content-Type': undefined\n\t\t\t},\n\t\t\ttransformRequest: function(data) {\n\t\t\t\tvar formData = new window.FormData();\n\t\t\t\tvar file = data.file;\n\t\t\t\tformData.append('file', file, file.name);\n\t\t\t\treturn formData;\n\t\t\t}\n\t\t}\n\t};\n}]);\n","/*jshint -W069 */\n/*jscs:disable requireDotNotation*/\n'use strict';\n\nangular.module('adama-web').factory('adamaTokenService', [\"$rootScope\", \"$http\", \"$q\", \"$state\", \"$log\", \"jwtHelper\", \"localStorageService\", \"adamaConstant\", function($rootScope, $http, $q, $state, $log, jwtHelper, localStorageService, adamaConstant) {\n\tvar log = $log.getInstance('adama-web.service');\n\n\tvar api = {};\n\n\tvar getPayload = function(key) {\n\t\treturn api.getToken().then(function(token) {\n\t\t\tif (token) {\n\t\t\t\tvar tokenPayload = jwtHelper.decodeToken(token);\n\t\t\t\tif (key) {\n\t\t\t\t\treturn tokenPayload[key];\n\t\t\t\t}\n\t\t\t\treturn tokenPayload;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t};\n\n\tapi.getUsername = function() {\n\t\treturn getPayload('sub');\n\t};\n\n\tapi.setToken = function(token) {\n\t\tlocalStorageService.set('token', token);\n\t};\n\n\tapi.setRefreshToken = function(token) {\n\t\tlocalStorageService.set('refresh_token', token);\n\t};\n\n\tapi.getToken = function() {\n\t\tvar token = localStorageService.get('token');\n\t\tif (token && jwtHelper.isTokenExpired(token)) {\n\t\t\tlog.debug('adamaTokenService.getToken token is expired');\n\t\t\treturn api.refreshAndGetToken();\n\t\t}\n\t\treturn $q.when(token);\n\t};\n\n\tapi.refreshAndGetToken = function() {\n\t\tvar token = localStorageService.get('token');\n\t\tif (!token) {\n\t\t\tconsole.error('no token, redirect to signin');\n\t\t\t$state.go('auth.signin');\n\t\t\treturn $q.reject('refreshAndGetToken : no token');\n\t\t}\n\t\tvar refreshToken = localStorageService.get('refresh_token');\n\t\treturn $http({\n\t\t\tmethod: 'POST',\n\t\t\turl: adamaConstant.apiBase + 'login/refresh',\n\t\t\theaders: {\n\t\t\t\t'Authorization': 'Bearer ' + token\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\t'refresh_token': refreshToken\n\t\t\t}\n\t\t}).then(function(response) {\n\t\t\tvar data = response.data;\n\t\t\tvar newToken = data['access_token'];\n\t\t\tapi.setToken(newToken);\n\t\t\treturn newToken;\n\t\t}, function(rejection) {\n\t\t\tconsole.error('error while refreshing user token, redirect to signin', rejection);\n\t\t\t$state.go('auth.signin');\n\t\t\tapi.setToken(undefined);\n\t\t\treturn $q.reject(rejection);\n\t\t});\n\t};\n\n\treturn api;\n}]);\n","'use strict';\n\nangular.module('adama-web').constant('adamaConstant', {\n\tapiBase: 'http://localhost:13337/',\n\tadamaWebToolkitTemplateUrl: {\n\t\tpassword: 'adama-web/account/password/password.html',\n\t\tsettings: 'adama-web/account/settings/settings.html',\n\t\tadamaAlertError: 'adama-web/alert/adama-alert-error.html',\n\t\tadamaAlert: 'adama-web/alert/adama-alert.html',\n\t\tarkFooter: 'adama-web/ark/ark-footer/ark-footer.html',\n\t\tarkHeader: 'adama-web/ark/ark-header/ark-header.html',\n\t\tlanguageSelector: 'adama-web/ark/language-selector/language-selector.html',\n\t\tmainNavigation: 'adama-web/ark/menu/main-navigation.html',\n\t\tselectAll: 'adama-web/ark/select-all/select-all.html',\n\t\tuserInfo: 'adama-web/ark/user-info/user-info.html',\n\t\tviewAttribute: 'adama-web/ark/view-attribute/view-attribute.html',\n\t\tresetPassword: 'adama-web/auth/resetPassword.html',\n\t\tsignin: 'adama-web/auth/signin.html',\n\t\trecoverPassword: 'adama-web/auth/recoverPassword.html',\n\t\taccessDenied: 'adama-web/auth/accessDenied.html',\n\t\tbinaryFileDefinition: 'adama-web/binary-file-definition/binary-file-definition.html',\n\t\tbtnConfirmEdit: 'adama-web/crud/btn-confirm-edit.html',\n\t\tbtnCreate: 'adama-web/crud/btn-create.html',\n\t\tcrudActionDropdown: 'adama-web/crud/crud-action-dropdown.html',\n\t\tcrudCustomFilter: 'adama-web/crud/crud-custom-filter.html',\n\t\tcrudSearchField: 'adama-web/crud/crud-search-field.html',\n\t\tmodalBtnConfirmDelete: 'adama-web/crud/modal-btn-confirm-delete.html',\n\t\tmodalBtnCancel: 'adama-web/crud/modal-btn-cancel.html',\n\t\tmodalBtnConfirmExportXls: 'adama-web/crud/modal-btn-confirm-export-xls.html',\n\t\tmodalBtnConfirmImportXls: 'adama-web/crud/modal-btn-confirm-import-xls.html',\n\t\tusers: 'adama-web/user/user-list.html',\n\t\tuserEdit: 'adama-web/user/user-edit.html',\n\t\tuserCreate: 'adama-web/user/user-edit.html',\n\t\tuserView: 'adama-web/user/user-view.html',\n\t\tuserDelete: 'adama-web/crud/crud-delete.html',\n\t\tusersImportXls: 'adama-web/crud/crud-import-xls.html',\n\t\tusersExportXls: 'adama-web/crud/crud-export-xls.html'\n\t},\n\tauthorities: ['ROLE_ADMIN', 'ROLE_USER', 'ROLE_MANAGER'],\n\tuserAuthorities: ['ROLE_MANAGER', 'ROLE_ADMIN'],\n\turlCreatePassword: 'replace/me/with/your/project/specific/url/reset-password.html?origin=front'\n});\n","/*jshint -W069 */\n/*jscs:disable requireDotNotation*/\n'use strict';\n\nangular.module('adama-web').factory('authBackendService', [\"$http\", \"adamaConstant\", \"adamaTokenService\", function loginService($http, adamaConstant, adamaTokenService) {\n\tvar api = {};\n\n\tapi.login = function(credentials) {\n\t\treturn $http.post(adamaConstant.apiBase + 'login/authenticate', {\n\t\t\tusername: credentials.username,\n\t\t\tpassword: credentials.password\n\t\t}).then(function(response) {\n\t\t\tvar data = response.data;\n\t\t\tadamaTokenService.setToken(data['access_token']);\n\t\t\tadamaTokenService.setRefreshToken(data['refresh_token']);\n\t\t});\n\t};\n\n\tapi.logout = function() {\n\t\tadamaTokenService.setToken(undefined);\n\t};\n\n\treturn api;\n}]);\n","'use strict';\n\nangular.module('adama-web').factory('Auth', [\"$rootScope\", \"$state\", \"$q\", \"$translate\", \"Principal\", \"authBackendService\", function Auth($rootScope, $state, $q, $translate, Principal, authBackendService) {\n\tvar api = {};\n\n\tapi.login = function(credentials) {\n\t\tvar deferred = $q.defer();\n\n\t\tauthBackendService.login(credentials).then(function(data) {\n\t\t\t// retrieve the logged account information\n\t\t\tPrincipal.identity(true).then(function(account) {\n\t\t\t\t// After the login the language will be changed to\n\t\t\t\t// the language selected by the user during his\n\t\t\t\t// registration\n\t\t\t\tif (account.langKey) {\n\t\t\t\t\t$translate.use(account.langKey);\n\t\t\t\t}\n\t\t\t\tdeferred.resolve(data);\n\t\t\t});\n\t\t}).catch(function(err) {\n\t\t\tapi.logout();\n\t\t\tdeferred.reject(err);\n\t\t});\n\n\t\treturn deferred.promise;\n\t};\n\n\tapi.logout = function() {\n\t\tauthBackendService.logout();\n\t\tPrincipal.authenticate(null);\n\t\t// Reset state memory\n\t\t$rootScope.previousStateName = undefined;\n\t\t$rootScope.previousStateNameParams = undefined;\n\t};\n\n\treturn api;\n}]);\n","/*jshint bitwise: false*/\n'use strict';\n\nangular.module('adama-web').service('Base64', function() {\n\tvar keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\tthis.encode = function(input) {\n\t\tvar output = '';\n\t\tvar chr1, chr2, enc1, enc2, enc3;\n\t\tvar chr3 = '';\n\t\tvar enc4 = '';\n\t\tvar i = 0;\n\n\t\twhile (i < input.length) {\n\t\t\tchr1 = input.charCodeAt(i++);\n\t\t\tchr2 = input.charCodeAt(i++);\n\t\t\tchr3 = input.charCodeAt(i++);\n\n\t\t\tenc1 = chr1 >> 2;\n\t\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t\t\tenc4 = chr3 & 63;\n\n\t\t\tif (isNaN(chr2)) {\n\t\t\t\tenc3 = enc4 = 64;\n\t\t\t} else if (isNaN(chr3)) {\n\t\t\t\tenc4 = 64;\n\t\t\t}\n\n\t\t\toutput = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n\t\t\tchr1 = chr2 = chr3 = '';\n\t\t\tenc1 = enc2 = enc3 = enc4 = '';\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tthis.decode = function(input) {\n\t\tvar output = '';\n\t\tvar chr1, chr2, enc1, enc2, enc3;\n\t\tvar chr3 = '';\n\t\tvar enc4 = '';\n\t\tvar i = 0;\n\n\t\t// remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n\t\tinput = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n\t\twhile (i < input.length) {\n\t\t\tenc1 = keyStr.indexOf(input.charAt(i++));\n\t\t\tenc2 = keyStr.indexOf(input.charAt(i++));\n\t\t\tenc3 = keyStr.indexOf(input.charAt(i++));\n\t\t\tenc4 = keyStr.indexOf(input.charAt(i++));\n\n\t\t\tchr1 = (enc1 << 2) | (enc2 >> 4);\n\t\t\tchr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n\t\t\tchr3 = ((enc3 & 3) << 6) | enc4;\n\n\t\t\toutput = output + String.fromCharCode(chr1);\n\n\t\t\tif (enc3 !== 64) {\n\t\t\t\toutput = output + String.fromCharCode(chr2);\n\t\t\t}\n\t\t\tif (enc4 !== 64) {\n\t\t\t\toutput = output + String.fromCharCode(chr3);\n\t\t\t}\n\n\t\t\tchr1 = chr2 = chr3 = '';\n\t\t\tenc1 = enc2 = enc3 = enc4 = '';\n\t\t}\n\t};\n});\n","'use strict';\n\nangular.module('adama-web').factory('binaryFileService', [\"$http\", \"$q\", \"Upload\", \"adamaConstant\", function($http, $q, Upload, adamaConstant) {\n\tvar api = {};\n\n\tapi.initUrlForBinaryFiles = function(binaryFileList) {\n\t\tvar workingList = [];\n\t\tvar idList = [];\n\t\tangular.forEach(binaryFileList, function(binaryFile) {\n\t\t\tif (binaryFile && binaryFile.id && !binaryFile.url) {\n\t\t\t\tworkingList.push(binaryFile);\n\t\t\t\tidList.push(binaryFile.id);\n\t\t\t}\n\t\t});\n\t\tif (idList.length) {\n\t\t\treturn $http({\n\t\t\t\tmethod: 'PUT',\n\t\t\t\turl: adamaConstant.apiBase + 'files',\n\t\t\t\tdata: idList\n\t\t\t}).then(function(response) {\n\t\t\t\tangular.forEach(workingList, function(binaryFile) {\n\t\t\t\t\tbinaryFile.url = response.data.urlList[binaryFile.id];\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn $q.when();\n\t};\n\n\tapi.uploadFile = function(file, isPicture) {\n\t\treturn Upload.upload({\n\t\t\turl: adamaConstant.apiBase + 'files?isPicture=' + isPicture,\n\t\t\tdata: {\n\t\t\t\tfile: file\n\t\t\t},\n\t\t\tdisableProgress: true\n\t\t});\n\t};\n\n\treturn api;\n}]);\n","'use strict';\n\nangular.module('adama-web').factory('binaryService', [\"FileSaver\", function(FileSaver) {\n\tvar api = {};\n\n\tvar saveFile = function(data, headersGetter, status, contentType, defaultFileName) {\n\t\tif (status === 200) {\n\t\t\tvar dataBlob = new Blob([data], {\n\t\t\t\ttype: contentType\n\t\t\t});\n\t\t\tvar contentDisposition = headersGetter('Content-Disposition');\n\t\t\tvar filename;\n\t\t\tif (contentDisposition) {\n\t\t\t\tfilename = contentDisposition.substring('attachment;filename = '.length);\n\t\t\t}\n\t\t\tif (!filename) {\n\t\t\t\tfilename = defaultFileName;\n\t\t\t}\n\t\t\tFileSaver.saveAs(dataBlob, filename);\n\t\t}\n\t\treturn data;\n\t};\n\n\tapi.transformResponseToPdf = function(data, headersGetter, status) {\n\t\treturn saveFile(data, headersGetter, status, 'application/pdf', 'file.pdf');\n\t};\n\n\tapi.transformResponseToExcel = function(data, headersGetter, status) {\n\t\treturn saveFile(data, headersGetter, status, 'application/vnd.ms-excel', 'file.xls');\n\t};\n\n\treturn api;\n}]);\n","'use strict';\n\nangular.module('adama-web').provider('language', function() {\n\tvar languages = ['en', 'fr'];\n\tvar selectorData = [{\n\t\tcode: 'en',\n\t\tlabelKey: 'FLAG_EN',\n\t\tcssCLass: 'us'\n\t}, {\n\t\tcode: 'fr',\n\t\tlabelKey: 'FLAG_FR',\n\t\tcssCLass: 'fr'\n\t}];\n\n\tthis.setLanguages = function(newLanguages) {\n\t\tlanguages = newLanguages;\n\t};\n\n\tthis.setSelectorData = function(newSelectorData) {\n\t\tselectorData = newSelectorData;\n\t};\n\n\tthis.$get = [\"$q\", \"$http\", \"$translate\", function($q, $http, $translate) {\n\t\tvar api = {};\n\n\t\tapi.getCurrent = function() {\n\t\t\tvar language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');\n\t\t\tif (angular.isUndefined(language)) {\n\t\t\t\tlanguage = 'en';\n\t\t\t}\n\t\t\treturn $q.when(language);\n\t\t};\n\n\t\tapi.getAll = function() {\n\t\t\treturn $q.when(languages);\n\t\t};\n\n\t\tapi.getSelectorData = function() {\n\t\t\treturn $q.when(selectorData);\n\t\t};\n\n\t\treturn api;\n\t}];\n});\n","'use strict';\n\nangular.module('adama-web').service('ParseLinks', function() {\n\tthis.parse = function(header) {\n\t\tif (header.length === 0) {\n\t\t\tthrow new Error('input must not be of zero length');\n\t\t}\n\n\t\t// Split parts by comma\n\t\tvar parts = header.split(',');\n\t\tvar links = {};\n\t\t// Parse each part into a named link\n\t\tangular.forEach(parts, function(p) {\n\t\t\tvar section = p.split(';');\n\t\t\tif (section.length !== 2) {\n\t\t\t\tthrow new Error('section could not be split on \";\"');\n\t\t\t}\n\t\t\tvar url = section[0].replace(/<(.*)>/, '$1').trim();\n\t\t\tvar queryString = {};\n\t\t\turl.replace(new RegExp('([^?=&]+)(=([^&]*))?', 'g'), function($0, $1, $2, $3) {\n\t\t\t\tqueryString[$1] = $3;\n\t\t\t});\n\t\t\tvar page = queryString.page;\n\t\t\tif (angular.isString(page)) {\n\t\t\t\tpage = parseInt(page);\n\t\t\t}\n\t\t\tvar name = section[1].replace(/rel='(.*)'/, '$1').trim();\n\t\t\tlinks[name] = page;\n\t\t});\n\n\t\treturn links;\n\t};\n});\n","'use strict';\n\nangular.module('adama-web').factory('Principal', [\"$http\", \"$q\", \"$rootScope\", \"$resource\", \"$state\", \"$log\", \"adamaConstant\", \"adamaTokenService\", function($http, $q, $rootScope, $resource, $state, $log, adamaConstant, adamaTokenService) {\n\tvar log = $log.getInstance('adama-web.service');\n\n\tvar Password = $resource(adamaConstant.apiBase + 'account/change_password');\n\tvar PasswordResetInit = $resource(adamaConstant.apiBase + 'account/reset_password/init', {}, {});\n\tvar PasswordResetFinish = $resource(adamaConstant.apiBase + 'account/reset_password/finish');\n\n\tvar _identity;\n\tvar _authenticated = false;\n\n\tvar api = {};\n\n\tapi.isIdentityResolved = function() {\n\t\treturn angular.isDefined(_identity);\n\t};\n\n\tapi.isAuthenticated = function() {\n\t\treturn _authenticated;\n\t};\n\n\tapi.hasAuthority = function(authority) {\n\t\tif (!_authenticated) {\n\t\t\treturn $q.when(false);\n\t\t}\n\t\treturn this.identity().then(function(_id) {\n\t\t\treturn _id.authority && _id.authority === authority;\n\t\t}, function() {\n\t\t\treturn false;\n\t\t});\n\t};\n\n\tapi.hasAnyAuthority = function(authorities) {\n\t\tif (!_authenticated || !_identity || !_identity.authority) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (var i = 0; i < authorities.length; i++) {\n\t\t\tif (_identity.authority === authorities[i]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tapi.authenticate = function(identity) {\n\t\t_identity = identity;\n\t\t_authenticated = identity !== null;\n\t};\n\n\tapi.identity = function(force) {\n\t\tvar deferred = $q.defer();\n\n\t\tif (force === true) {\n\t\t\t_identity = undefined;\n\t\t}\n\n\t\t// check and see if we have retrieved the identity data from the\n\t\t// server.\n\t\t// if we have, reuse it by immediately resolving\n\t\tif (angular.isDefined(_identity)) {\n\t\t\tdeferred.resolve(_identity);\n\n\t\t\treturn deferred.promise;\n\t\t}\n\n\t\t// retrieve the identity data from the server, update the\n\t\t// identity object, and then resolve.\n\n\t\t// from jwt token : sub\n\t\t// users/byLogin/:sub\n\t\tadamaTokenService.getUsername().then(function(username) {\n\t\t\tif (username) {\n\t\t\t\treturn $http({\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\turl: adamaConstant.apiBase + 'users/byLogin/' + username\n\t\t\t\t}).then(function(response) {\n\t\t\t\t\treturn response.data;\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn $q.reject('not connected');\n\t\t}).then(function(account) {\n\t\t\t_identity = account;\n\t\t\t_authenticated = true;\n\t\t\tdeferred.resolve(_identity);\n\t\t}, function() {\n\t\t\t_identity = null;\n\t\t\t_authenticated = false;\n\t\t\tdeferred.resolve(_identity);\n\t\t});\n\n\t\treturn deferred.promise;\n\t};\n\n\tapi.authorize = function(force) {\n\t\treturn api.identity(force).then(function() {\n\t\t\tvar isAuthenticated = api.isAuthenticated();\n\t\t\t// an authenticated user can't access to login pages\n\t\t\tif (isAuthenticated && $rootScope.toState.name && $rootScope.toState.name === 'auth.signin') {\n\t\t\t\tlog.debug('redirect to main as user is authenticated and is trying to access signin');\n\t\t\t\treturn $state.go('app.main', {}, {\n\t\t\t\t\tlocation: 'replace'\n\t\t\t\t});\n\t\t\t}\n\t\t\tif ((!$rootScope.toState.data || !$rootScope.toState.data.authorities) && !isAuthenticated) {\n\t\t\t\t// user is not signed in but desired state needs an\n\t\t\t\t// authenticated user\n\t\t\t\tlog.debug('redirect to signin as user is not authenticated and page is restricted (default conf with no authorities on state)');\n\t\t\t\treturn $state.go('auth.signin', {}, {\n\t\t\t\t\tlocation: 'replace'\n\t\t\t\t});\n\t\t\t}\n\t\t\tif ($rootScope.toState.data && //\n\t\t\t\t$rootScope.toState.data.authorities && //\n\t\t\t\t$rootScope.toState.data.authorities.length > 0 && //\n\t\t\t\t!api.hasAnyAuthority($rootScope.toState.data.authorities) //\n\t\t\t) {\n\t\t\t\tif (isAuthenticated) {\n\t\t\t\t\t// user is signed in but not authorized for\n\t\t\t\t\t// desired state\n\t\t\t\t\tlog.debug('redirect to accessDenied as user is authenticated and does not have right privileges');\n\t\t\t\t\treturn $state.go('auth.accessDenied', {}, {\n\t\t\t\t\t\tlocation: 'replace'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// user is not authenticated. stow the state\n\t\t\t\t// they wanted before you\n\t\t\t\t// send them to the signin state, so you can\n\t\t\t\t// return them when you're done\n\t\t\t\t$rootScope.previousStateName = $rootScope.toState;\n\t\t\t\t$rootScope.previousStateNameParams = $rootScope.toStateParams;\n\t\t\t\t// now, send them to the signin state so they\n\t\t\t\t// can log in\n\t\t\t\tlog.debug('redirect to signin as user is not authenticated and page is restricted (conf with explicit authorities on state)');\n\t\t\t\treturn $state.go('auth.signin', {}, {\n\t\t\t\t\tlocation: 'replace'\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\tapi.updateAccount = function(account) {\n\t\treturn $http({\n\t\t\tmethod: 'PUT',\n\t\t\turl: adamaConstant.apiBase + 'users',\n\t\t\tdata: {\n\t\t\t\tuser: account\n\t\t\t}\n\t\t}).then(function() {\n\t\t\t$rootScope.$emit('auth.updateAccount', {\n\t\t\t\taccount: account\n\t\t\t});\n\t\t\treturn account;\n\t\t});\n\t};\n\n\tapi.changePassword = function(newPassword) {\n\t\treturn Password.save(newPassword).$promise;\n\t};\n\n\tapi.resetPasswordInit = function(mail) {\n\t\treturn PasswordResetInit.save({\n\t\t\tmail: mail,\n\t\t\turlResetPassword: adamaConstant.urlCreatePassword\n\t\t}).$promise;\n\t};\n\n\tapi.resetPasswordFinish = function(keyAndPassword) {\n\t\treturn PasswordResetFinish.save(keyAndPassword).$promise;\n\t};\n\n\treturn api;\n}]);\n","'use strict';\n\nangular.module('adama-web').config([\"$stateProvider\", \"adamaConstant\", function($stateProvider, adamaConstant) {\n\t$stateProvider.state('app.user', {\n\t\tabstract: true,\n\t\turl: '/users',\n\t\ttemplate: '<ui-view></ui-view>'\n\t});\n\n\t$stateProvider.state('app.user.list', {\n\t\turl: '',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.users;\n\t\t},\n\t\tcontroller: 'CrudListCtrl',\n\t\tcontrollerAs: 'ctrl',\n\t\tresolve: {\n\t\t\tEntityGenericResource: [\"User\", function(User) {\n\t\t\t\treturn User;\n\t\t\t}]\n\t\t},\n\t\tdata: {\n\t\t\tpageTitle: 'USER_TITLE_LIST',\n\t\t\tauthorities: adamaConstant.userAuthorities\n\t\t}\n\t});\n\n\t$stateProvider.state('app.user.view', {\n\t\turl: '/view/:entityId',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.userView;\n\t\t},\n\t\tcontroller: 'CrudViewCtrl',\n\t\tcontrollerAs: 'ctrl',\n\t\tresolve: {\n\t\t\tentity: [\"$stateParams\", \"User\", function($stateParams, User) {\n\t\t\t\treturn User.get({\n\t\t\t\t\tid: $stateParams.entityId\n\t\t\t\t}).$promise;\n\t\t\t}]\n\t\t},\n\t\tdata: {\n\t\t\tpageTitle: 'USER_TITLE_VIEW',\n\t\t\tauthorities: adamaConstant.userAuthorities\n\t\t}\n\t});\n\n\t$stateProvider.state('app.user.edit', {\n\t\turl: '/edit/:entityId',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.userEdit;\n\t\t},\n\t\tcontroller: 'CrudEditCtrl',\n\t\tcontrollerAs: 'ctrl',\n\t\tresolve: {\n\t\t\tentity: [\"$stateParams\", \"User\", function($stateParams, User) {\n\t\t\t\treturn User.get({\n\t\t\t\t\tid: $stateParams.entityId\n\t\t\t\t}).$promise;\n\t\t\t}],\n\t\t\tEntityGenericResource: [\"User\", function(User) {\n\t\t\t\treturn User;\n\t\t\t}]\n\t\t},\n\t\tdata: {\n\t\t\tpageTitle: 'USER_TITLE_EDIT',\n\t\t\tauthorities: adamaConstant.userAuthorities\n\t\t}\n\t});\n\n\t$stateProvider.state('app.user.create', {\n\t\turl: '/new',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.userCreate;\n\t\t},\n\t\tcontroller: 'CrudEditCtrl',\n\t\tcontrollerAs: 'ctrl',\n\t\tresolve: {\n\t\t\tentity: function() {\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tEntityGenericResource: [\"User\", function(User) {\n\t\t\t\treturn User;\n\t\t\t}]\n\t\t},\n\t\tdata: {\n\t\t\tpageTitle: 'USER_TITLE_NEW',\n\t\t\tauthorities: adamaConstant.userAuthorities\n\t\t}\n\t});\n\n\tvar openModal = function($state, $uibModal, $stateParams, controllerName, templateUrl, title) {\n\t\tvar resolveEntity;\n\t\tif ($stateParams) {\n\t\t\tresolveEntity = /* @ngInject */ [\"User\", function(User) {\n\t\t\t\treturn User.get({\n\t\t\t\t\tid: $stateParams.entityId\n\t\t\t\t}).$promise;\n\t\t\t}];\n\t\t}\n\t\t$uibModal.open({\n\t\t\ttemplateUrl: templateUrl,\n\t\t\tresolve: {\n\t\t\t\tentity: resolveEntity,\n\t\t\t\tEntityGenericResource: [\"User\", function(User) {\n\t\t\t\t\treturn User;\n\t\t\t\t}],\n\t\t\t\ttitle: function() {\n\t\t\t\t\treturn title;\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontroller: controllerName + ' as ctrl'\n\t\t}).result.then(function() {\n\t\t\t$state.go('^', {}, {\n\t\t\t\treload: true\n\t\t\t});\n\t\t}).catch(function() {\n\t\t\t$state.go('^');\n\t\t});\n\t};\n\n\t$stateProvider.state('app.user.delete', {\n\t\turl: '/delete/:entityId',\n\t\tparent: 'app.user.list',\n\t\tonEnter: [\"$state\", \"$uibModal\", \"$stateParams\", \"adamaConstant\", function($state, $uibModal, $stateParams, adamaConstant) {\n\t\t\topenModal($state, $uibModal, $stateParams, 'CrudDeleteCtrl', adamaConstant.adamaWebToolkitTemplateUrl.userDelete, 'USER_TITLE_DELETE');\n\t\t}],\n\t\tdata: {\n\t\t\tpageTitle: 'USER_TITLE_DELETE',\n\t\t\tauthorities: adamaConstant.userAuthorities\n\t\t}\n\t});\n\n\t$stateProvider.state('app.user.importXls', {\n\t\turl: '/import-xls',\n\t\tparent: 'app.user.list',\n\t\tonEnter: [\"$state\", \"$uibModal\", \"adamaConstant\", function($state, $uibModal, adamaConstant) {\n\t\t\topenModal($state, $uibModal, undefined, 'CrudImportXlsCtrl', adamaConstant.adamaWebToolkitTemplateUrl.usersImportXls, 'USER_TITLE_IMPORT_XLS');\n\t\t}],\n\t\tdata: {\n\t\t\tpageTitle: 'USER_TITLE_IMPORT_XLS',\n\t\t\tauthorities: adamaConstant.userAuthorities\n\t\t}\n\t});\n\n\t$stateProvider.state('app.user.exportXls', {\n\t\turl: '/export-xls',\n\t\tparent: 'app.user.list',\n\t\tonEnter: [\"$state\", \"$uibModal\", \"adamaConstant\", function($state, $uibModal, adamaConstant) {\n\t\t\topenModal($state, $uibModal, undefined, 'CrudExportXlsCtrl', adamaConstant.adamaWebToolkitTemplateUrl.usersExportXls, 'USER_TITLE_EXPORT_XLS');\n\t\t}],\n\t\tdata: {\n\t\t\tpageTitle: 'USER_TITLE_EXPORT_XLS',\n\t\t\tauthorities: adamaConstant.userAuthorities\n\t\t}\n\t});\n}]);\n\nangular.module('adama-web').config([\"$translateProvider\", function($translateProvider) {\n\t$translateProvider.translations('fr', {\n\t\terror: {\n\t\t\tuserexists: 'Login déjà utilisé !',\n\t\t\temailexists: 'E-mail déjà utilisé !'\n\t\t},\n\t\t'USER_MENU': 'Utilisateurs',\n\t\t'USER_TITLE_DELETE': 'Suppression d\\'un utilisateur',\n\t\t'USER_TITLE_VIEW': 'Détails d\\'un utilisateur',\n\t\t'USER_TITLE_LIST': 'Liste des utilisateurs',\n\t\t'USER_TITLE_EDIT': 'Editer un utilisateur',\n\t\t'USER_TITLE_NEW': 'Créer un utilisateur',\n\t\t'USER_TITLE_IMPORT_XLS': 'Importer en masse des utilisateurs',\n\t\t'USER_TITLE_EXPORT_XLS': 'Exporter en masse des utilisateurs',\n\n\t\t'USER_FORM_LOGIN': 'Identifiant',\n\t\t'USER_FORM_FIRSTNAME': 'Prénom',\n\t\t'USER_FORM_LASTNAME': 'Nom de famille',\n\t\t'USER_FORM_EMAIL': 'Email',\n\t\t'USER_FORM_LANGUAGE': 'Langue',\n\t\t'USER_FORM_AUTHORITY': 'Rôle',\n\n\t\t'USER_LIST_LOGIN': 'Identifiant',\n\t\t'USER_LIST_MAIL': 'Email',\n\t\t'USER_LIST_LANGUAGE': 'Langue',\n\t\t'USER_LIST_AUTHORITY': 'Rôle'\n\t});\n\n\t$translateProvider.translations('en', {\n\t\terror: {\n\t\t\tuserexists: 'Login name already used!',\n\t\t\temailexists: 'E-mail is already in use!'\n\t\t},\n\t\t'USER_MENU': 'Users',\n\t\t'USER_TITLE_DELETE': 'User delete',\n\t\t'USER_TITLE_VIEW': 'User details',\n\t\t'USER_TITLE_LIST': 'User list',\n\t\t'USER_TITLE_EDIT': 'User edition',\n\t\t'USER_TITLE_NEW': 'User creation',\n\t\t'USER_TITLE_IMPORT_XLS': 'Users mass import',\n\t\t'USER_TITLE_EXPORT_XLS': 'Users mass export',\n\n\t\t'USER_FORM_LOGIN': 'Login',\n\t\t'USER_FORM_FIRSTNAME': 'Firstname',\n\t\t'USER_FORM_LASTNAME': 'Lastname',\n\t\t'USER_FORM_EMAIL': 'Email',\n\t\t'USER_FORM_LANGUAGE': 'Language',\n\t\t'USER_FORM_AUTHORITY': 'Authority',\n\n\t\t'USER_LIST_LOGIN': 'Login',\n\t\t'USER_LIST_MAIL': 'Email',\n\t\t'USER_LIST_LANGUAGE': 'Language',\n\t\t'USER_LIST_AUTHORITY': 'Authority'\n\t});\n}]);\n","'use strict';\n\nangular.module('adama-web').controller('AccessDeniedCtrl', function() {\n\t// nothing to do\n});\n","'use strict';\n\nangular.module('adama-web').config([\"$stateProvider\", \"adamaConstant\", function($stateProvider, adamaConstant) {\n\t$stateProvider.state('auth', {\n\t\tabstract: true,\n\t\turl: '/auth',\n\t\ttemplate: '<ui-view></ui-view>'\n\t});\n\n\t$stateProvider.state('auth.signin', {\n\t\turl: '/',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.signin;\n\t\t},\n\t\tcontroller: 'SigninCtrl',\n\t\tcontrollerAs: 'ctrl',\n\t\tdata: {\n\t\t\tpageTitle: 'SIGNIN',\n\t\t\tauthorities: []\n\t\t}\n\t});\n\n\t$stateProvider.state('auth.recoverPassword', {\n\t\turl: '/recoverPassword',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.recoverPassword;\n\t\t},\n\t\tcontroller: 'RecoverPasswordCtrl',\n\t\tcontrollerAs: 'ctrl',\n\t\tdata: {\n\t\t\tpageTitle: 'RECOVER',\n\t\t\tauthorities: []\n\t\t}\n\t});\n\n\t$stateProvider.state('auth.accessDenied', {\n\t\turl: '/accessDenied',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.accessDenied;\n\t\t},\n\t\tcontroller: 'AccessDeniedCtrl',\n\t\tcontrollerAs: 'ctrl',\n\t\tdata: {\n\t\t\tpageTitle: 'ACCESS_DENIED',\n\t\t\tauthorities: []\n\t\t}\n\t});\n\n\t$stateProvider.state('auth.resetPassword', {\n\t\turl: '/resetPassword',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.resetPassword;\n\t\t},\n\t\tcontroller: 'ResetPasswordCtrl',\n\t\tcontrollerAs: 'ctrl',\n\t\tdata: {\n\t\t\tpageTitle: 'RESET_PASSWORD',\n\t\t\tauthorities: []\n\t\t}\n\t});\n}]);\n\nangular.module('adama-web').config([\"$translateProvider\", function($translateProvider) {\n\t$translateProvider.translations('fr', {\n\t\t'SIGNIN': 'Identification',\n\t\t'SIGNIN_INTRO': 'Identifiez-vous pour démarrer votre session',\n\t\t'SIGNIN_FORGET_PASSWORD': 'J\\'ai oublié mon mot de passe ...',\n\t\t'SIGNIN_USERNAME': 'Identifiant',\n\t\t'SIGNIN_USERNAME_REQUIRED': 'L\\'identifiant est obligatoire',\n\t\t'SIGNIN_PASSWORD': 'Mot de passe',\n\t\t'SIGNIN_PASSWORD_REQUIRED': 'Le mot de passe est obligatoire',\n\t\t'SIGNIN_SUBMIT': 'Démarrer la session',\n\t\t'SIGNIN_ERROR': 'Erreur d\\'authentification : identifiant ou mot de passe incorrect.',\n\t\t'RECOVER': 'Récupération de mot de passe',\n\t\t'RECOVER_INTRO': 'Saisissez votre email pour récupérer votre mot de passe',\n\t\t'RECOVER_MAIL': 'Email',\n\t\t'RECOVER_MAIL_REQUIRED': 'L\\'email est obligatoire',\n\t\t'RECOVER_MAIL_EMAIL': 'L\\'email n\\'est pas au bon format',\n\t\t'RECOVER_SUBMIT': 'Récupérer mon mot de passe',\n\t\t'RECOVER_BACK_TO_LOGIN': 'Retour à l\\'identificaition',\n\t\t'RECOVER_SUCCESS': 'Consultez votre email pour connaître comment réinitialiser votre mot de passe.',\n\t\t'RECOVER_ERROR': 'Erreur lors de la récupération du mot de passe.',\n\t\t'RECOVER_ERROR_EMAIL_NOT_EXIST': 'L\\'email n\\'existe pas',\n\t\t'ACCESS_DENIED': 'Accès interdit',\n\t\t'ACCESS_DENIED_INTRO': 'Vous n\\'avez pas suffisamment de droits d\\'accéder à cette page.',\n\t\t'ACCESS_DENIED_BACK_TO_LOGIN': 'Retour à l\\'identificaition',\n\t\t'RESET_PASSWORD': 'Initialisation du mot de passe',\n\t\t'RESET_PASSWORD_INTRO': 'Saisissez et confirmez votre mot de passe',\n\t\t'RESET_PASSWORD_SUBMIT': 'Modifier mon mot de passe',\n\t\t'RESET_PASSWORD_PASSWORD': 'Mot de passe',\n\t\t'RESET_PASSWORD_PASSWORD_REQUIRED': 'Le mot de passe est obligatoire',\n\t\t'RESET_PASSWORD_PASSWORD_MINLENGTH': 'Minimum 6 caractères',\n\t\t'RESET_PASSWORD_PASSWORD_MAXLENGTH': 'Maximum 100 caractères',\n\t\t'RESET_PASSWORD_PASSWORD_CONFIRM': 'Confirmation du mot de passe',\n\t\t'RESET_PASSWORD_PASSWORD_CONFIRM_REQUIRED': 'La confirmation est obligatoire',\n\t\t'RESET_PASSWORD_PASSWORD_CONFIRM_MATCH': 'La confirmation ne correspond pas',\n\t\t'RESET_PASSWORD_ERROR': 'Une erreur est intervenue, contactez un administrateur',\n\t\t'RESET_PASSWORD_MESSAGE_FOR_MOBILE_USER': 'Vous pouvez vous authentifier dans l\\'application mobile'\n\t});\n\n\t$translateProvider.translations('en', {\n\t\t'SIGNIN': 'Signin',\n\t\t'SIGNIN_INTRO': 'Sign in to start your session',\n\t\t'SIGNIN_FORGET_PASSWORD': 'I forgot my password ...',\n\t\t'SIGNIN_USERNAME': 'Username',\n\t\t'SIGNIN_USERNAME_REQUIRED': 'Username is required',\n\t\t'SIGNIN_PASSWORD': 'Password',\n\t\t'SIGNIN_PASSWORD_REQUIRED': 'Password is required',\n\t\t'SIGNIN_SUBMIT': 'Start session',\n\t\t'SIGNIN_ERROR': 'Authentication error : Username or password are incorrect.',\n\t\t'RECOVER': 'Recover password',\n\t\t'RECOVER_INTRO': 'Set your email to recover your password',\n\t\t'RECOVER_MAIL': 'Email',\n\t\t'RECOVER_MAIL_REQUIRED': 'Email is required',\n\t\t'RECOVER_MAIL_EMAIL': 'Email does not respect the right format',\n\t\t'RECOVER_SUBMIT': 'Retrieve my password',\n\t\t'RECOVER_BACK_TO_LOGIN': 'Back to signin',\n\t\t'RECOVER_SUCCESS': 'Check your e-mails for details on how to reset your password.',\n\t\t'RECOVER_ERROR': 'Recovering error.',\n\t\t'RECOVER_ERROR_EMAIL_NOT_EXIST': 'E-Mail address isn\\'t registered! Please check and try again',\n\t\t'ACCESS_DENIED': 'Access denied',\n\t\t'ACCESS_DENIED_INTRO': 'You do not have enough privileges to access this page.',\n\t\t'ACCESS_DENIED_BACK_TO_LOGIN': 'Back to signin',\n\t\t'RESET_PASSWORD': 'New password',\n\t\t'RESET_PASSWORD_INTRO': 'Set and confirm new password',\n\t\t'RESET_PASSWORD_SUBMIT': 'Change my password',\n\t\t'RESET_PASSWORD_PASSWORD': 'Password',\n\t\t'RESET_PASSWORD_PASSWORD_REQUIRED': 'Password is required',\n\t\t'RESET_PASSWORD_PASSWORD_MINLENGTH': '6 chars minimum',\n\t\t'RESET_PASSWORD_PASSWORD_MAXLENGTH': '100 chars maximum',\n\t\t'RESET_PASSWORD_PASSWORD_CONFIRM': 'Password confirmation',\n\t\t'RESET_PASSWORD_PASSWORD_CONFIRM_REQUIRED': 'Confirmation is required',\n\t\t'RESET_PASSWORD_PASSWORD_CONFIRM_MATCH': 'Confirmation does not match',\n\t\t'RESET_PASSWORD_ERROR': 'There was an error, please contact adminstrator',\n\t\t'RESET_PASSWORD_MESSAGE_FOR_MOBILE_USER': 'You can now signin into the mobile application'\n\t});\n}]);\n","'use strict';\n\nangular.module('adama-web').controller('RecoverPasswordCtrl', [\"Principal\", function(Principal) {\n\tvar ctrl = this;\n\tctrl.recover = function(userEmail) {\n\t\tctrl.recoverSuccess = false;\n\t\tctrl.recoverError = false;\n\t\tctrl.errorEmailNotExists = false;\n\t\tctrl.loading = true;\n\t\tPrincipal.resetPasswordInit(userEmail).then(function() {\n\t\t\tctrl.recoverSuccess = true;\n\t\t}).catch(function(response) {\n\t\t\tif (response.status === 400 && response.data === 'e-mail address not registered') {\n\t\t\t\tctrl.errorEmailNotExists = true;\n\t\t\t} else {\n\t\t\t\tctrl.recoverError = true;\n\t\t\t}\n\t\t}).finally(function() {\n\t\t\tctrl.loading = false;\n\t\t});\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').controller('ResetPasswordCtrl', [\"$location\", \"$state\", \"Principal\", function($location, $state, Principal) {\n\tvar ctrl = this;\n\tctrl.loading = false;\n\tctrl.resetError = false;\n\tctrl.messageForMobileUser = false;\n\tctrl.resetPassword = function(newPassword) {\n\t\tctrl.loading = true;\n\t\tPrincipal.resetPasswordFinish({\n\t\t\tkey: $location.search().key,\n\t\t\tnewPassword: newPassword\n\t\t}).then(function() {\n\t\t\tvar origin = $location.search().origin;\n\t\t\tconsole.log('origin', origin);\n\t\t\tif (origin === 'front') {\n\t\t\t\t$state.go('^.signin');\n\t\t\t} else if (origin === 'mobile') {\n\t\t\t\tctrl.messageForMobileUser = true;\n\t\t\t}\n\t\t}, function() {\n\t\t\tctrl.resetError = true;\n\t\t});\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').controller('SigninCtrl', [\"$rootScope\", \"$state\", \"Auth\", function($rootScope, $state, Auth) {\n\tvar ctrl = this;\n\tctrl.signin = function(userName, userPassword) {\n\t\tctrl.authenticationError = false;\n\t\tAuth.login({\n\t\t\tusername: userName,\n\t\t\tpassword: userPassword\n\t\t}).then(function() {\n\t\t\tif ($rootScope.previousStateName === 'auth.signin' || $state.get($rootScope.previousStateName) === null) {\n\t\t\t\t$state.go('app.main');\n\t\t\t} else {\n\t\t\t\t$state.go($rootScope.previousStateName, $rootScope.previousStateParams);\n\t\t\t}\n\t\t}).catch(function() {\n\t\t\tctrl.authenticationError = true;\n\t\t});\n\t};\n}]);\n","/*jshint -W069 */\n/*jscs:disable requireDotNotation*/\n'use strict';\n\nangular.module('adama-web').factory('authExpiredInterceptor', [\"$injector\", \"$q\", \"$log\", \"adamaConstant\", function($injector, $q, $log, adamaConstant) {\n\tvar getHttpService = (function() {\n\t\tvar service;\n\t\treturn function() {\n\t\t\treturn service || (service = $injector.get('$http'));\n\t\t};\n\t}());\n\n\tvar getAdamaTokenService = (function() {\n\t\tvar service;\n\t\treturn function() {\n\t\t\treturn service || (service = $injector.get('adamaTokenService'));\n\t\t};\n\t}());\n\n\treturn {\n\t\tresponseError: function(response) {\n\t\t\tvar log = $log.getInstance('adama-web.interceptors');\n\t\t\tvar config = response.config;\n\t\t\tif (response.status === 401 && config && config.url.indexOf(adamaConstant.apiBase) === 0 && config.url.indexOf(adamaConstant.apiBase + 'login/authenticate') !== 0) {\n\t\t\t\tlog.debug('authExpiredInterceptor error 401, refresh token');\n\t\t\t\treturn getAdamaTokenService().refreshAndGetToken().then(function() {\n\t\t\t\t\tlog.debug('authExpiredInterceptor token is refresh, reset Authorization header');\n\t\t\t\t\tconfig.headers['Authorization'] = undefined;\n\t\t\t\t\treturn getHttpService()(config);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn $q.reject(response);\n\t\t}\n\t};\n}]);\n","/*jshint -W069 */\n/*jscs:disable requireDotNotation*/\n'use strict';\n\nangular.module('adama-web').factory('authInterceptor', [\"$injector\", \"$log\", \"adamaConstant\", function($injector, $log, adamaConstant) {\n\tvar getAdamaTokenService = (function() {\n\t\tvar service;\n\t\treturn function() {\n\t\t\treturn service || (service = $injector.get('adamaTokenService'));\n\t\t};\n\t}());\n\n\treturn {\n\t\t// Add authorization token to headers\n\t\trequest: function(config) {\n\t\t\tvar log = $log.getInstance('adama-web.interceptors');\n\t\t\tconfig.headers = config.headers || {};\n\t\t\tif (!config.headers['Authorization'] && config.url.indexOf(adamaConstant.apiBase) === 0) {\n\t\t\t\tlog.debug('authInterceptor need authorization, getting token');\n\t\t\t\treturn getAdamaTokenService().getToken().then(function(token) {\n\t\t\t\t\tlog.debug('add token to http config');\n\t\t\t\t\tif (token) {\n\t\t\t\t\t\tconfig.headers['Authorization'] = 'Bearer ' + token;\n\t\t\t\t\t}\n\t\t\t\t\treturn config;\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn config;\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').factory('errorHandlerInterceptor', [\"$q\", \"$rootScope\", function($q, $rootScope) {\n\treturn {\n\t\t'responseError': function(response) {\n\t\t\tif (!(response.status === 401 && response.data === 'Bad credentials')) {\n\t\t\t\t$rootScope.$emit('Adama.httpError', response);\n\t\t\t}\n\t\t\treturn $q.reject(response);\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').factory('notificationInterceptor', [\"$q\", \"AlertService\", function($q, AlertService) {\n\treturn {\n\t\tresponse: function(response) {\n\t\t\tvar alertKey = response.headers('X-Adama-alert');\n\t\t\tif (angular.isString(alertKey)) {\n\t\t\t\tAlertService.success(alertKey, {\n\t\t\t\t\tparam: response.headers('X-Adama-params')\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn response;\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').directive('dsAuthorities', [\"$parse\", \"adamaConstant\", function($parse, adamaConstant) {\n\treturn {\n\t\tscope: false,\n\t\tlink: function(scope, element, attrs) {\n\t\t\tvar authorities = adamaConstant.authorities;\n\t\t\t$parse(attrs.data).assign(scope, authorities);\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').directive('dsBinaryFileUrl', [\"$parse\", \"binaryFileService\", function($parse, binaryFileService) {\n\treturn {\n\t\tscope: false,\n\t\tlink: function(scope, element, attrs) {\n\t\t\tvar updateOutput = function(binaryFileList) {\n\t\t\t\tif (attrs.output) {\n\t\t\t\t\tbinaryFileList = angular.copy(binaryFileList);\n\t\t\t\t}\n\t\t\t\tif (!angular.isArray(binaryFileList)) {\n\t\t\t\t\tbinaryFileList = [binaryFileList];\n\t\t\t\t}\n\t\t\t\tbinaryFileService.initUrlForBinaryFiles(binaryFileList).then(function() {\n\t\t\t\t\tif (attrs.output) {\n\t\t\t\t\t\t$parse(attrs.output).assign(scope, binaryFileList);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t\tscope.$watch(attrs.input, function() {\n\t\t\t\tvar binaryFileList = $parse(attrs.input)(scope);\n\t\t\t\tif (binaryFileList) {\n\t\t\t\t\tupdateOutput(binaryFileList);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').directive('dsLanguage', [\"$parse\", \"language\", function($parse, language) {\n\treturn {\n\t\tscope: false,\n\t\tlink: function(scope, element, attrs) {\n\t\t\tlanguage.getAll().then(function(languages) {\n\t\t\t\t$parse(attrs.data).assign(scope, languages);\n\t\t\t});\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').directive('dsPrincipalIdentity', [\"$parse\", \"Principal\", function($parse, Principal) {\n\treturn {\n\t\tscope: false,\n\t\tlink: function(scope, element, attrs) {\n\t\t\tPrincipal.identity().then(function(account) {\n\t\t\t\t$parse(attrs.data).assign(scope, account);\n\t\t\t});\n\t\t}\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').config([\"$stateProvider\", \"adamaConstant\", function($stateProvider, adamaConstant) {\n\t$stateProvider.state('app.personal.password', {\n\t\turl: '/password',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.password;\n\t\t},\n\t\tcontroller: 'PasswordCtrl',\n\t\tcontrollerAs: 'ctrl',\n\t\tdata: {\n\t\t\tpageTitle: 'ACCOUNT_PASSWORD'\n\t\t}\n\t});\n}]);\n\nangular.module('adama-web').config([\"$translateProvider\", function($translateProvider) {\n\t$translateProvider.translations('fr', {\n\t\t'ACCOUNT_PASSWORD': 'Modifier mon mot de passe',\n\t\t'ACCOUNT_PASSWORD_TITLE': 'Modifier mon mot de passe',\n\t\t'ACCOUNT_PASSWORD_NEWPASSWORD': 'Mot de passe',\n\t\t'ACCOUNT_PASSWORD_NEWPASSWORD_PLACEHOLDER': 'Mot de passe ?',\n\t\t'ACCOUNT_PASSWORD_NEWPASSWORD_REQUIRED': 'Le mot de passe est obligatoire',\n\t\t'ACCOUNT_PASSWORD_NEWPASSWORD_MINLENGTH': 'Le mot de passe doit être composé d\\'au moins 5 caractères.',\n\t\t'ACCOUNT_PASSWORD_NEWPASSWORD_MAXLENGTH': 'Le mot de passe doit être composé d\\'au plus 50 caractères.',\n\t\t'ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD': 'Confirmation du mot de passe',\n\t\t'ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_PLACEHOLDER': 'Confirmation du mot de passe ?',\n\t\t'ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_REQUIRED': 'La confirmation du mot de passe est obligatoire',\n\t\t'ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_MINLENGTH': 'La confirmation du mot de passe doit être composé d\\'au moins 5 caractères.',\n\t\t'ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_MAXLENGTH': 'La confirmation du mot de passe doit être composé d\\'au plus 50 caractères.',\n\t\t'ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_PATTERN': 'Les mots de passe ne sont pas égaux.',\n\t\t'ACCOUNT_PASSWORD_SUBMIT': 'Enregistrer',\n\t\t'ACCOUNT_PASSWORD_SAVE_SUCCESS': 'Le mot de passe a été changé avec succès.',\n\t\t'ACCOUNT_PASSWORD_SAVE_ERROR': 'Le mot de passe n\\'a pu être changé.'\n\t});\n\n\t$translateProvider.translations('en', {\n\t\t'ACCOUNT_PASSWORD': 'Change my password',\n\t\t'ACCOUNT_PASSWORD_TITLE': 'Change my password',\n\t\t'ACCOUNT_PASSWORD_NEWPASSWORD': 'Password',\n\t\t'ACCOUNT_PASSWORD_NEWPASSWORD_PLACEHOLDER': 'Password ?',\n\t\t'ACCOUNT_PASSWORD_NEWPASSWORD_REQUIRED': 'Your password is required.',\n\t\t'ACCOUNT_PASSWORD_NEWPASSWORD_MINLENGTH': 'Your password is required to be at least 5 characters.',\n\t\t'ACCOUNT_PASSWORD_NEWPASSWORD_MAXLENGTH': 'Your password cannot be longer than 50 characters.',\n\t\t'ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD': 'Password confirmation',\n\t\t'ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_PLACEHOLDER': 'Password confirmation ?',\n\t\t'ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_REQUIRED': 'Your confirmation password is required.',\n\t\t'ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_MINLENGTH': 'Your confirmation password is required to be at least 5 characters.',\n\t\t'ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_MAXLENGTH': 'Your confirmation password cannot be longer than 50 characters.',\n\t\t'ACCOUNT_PASSWORD_CONFIRM_NEWPASSWORD_PATTERN': 'Password and confirmation do not match.',\n\t\t'ACCOUNT_PASSWORD_SUBMIT': 'Save',\n\t\t'ACCOUNT_PASSWORD_SAVE_SUCCESS': 'Password successfully changed.',\n\t\t'ACCOUNT_PASSWORD_SAVE_ERROR': 'Password could not be changed.'\n\t});\n}]);\n","'use strict';\n\nangular.module('adama-web').controller('PasswordCtrl', [\"Principal\", \"AlertService\", function(Principal, AlertService) {\n\tvar ctrl = this;\n\tPrincipal.identity().then(function(account) {\n\t\tctrl.account = account;\n\t});\n\tctrl.changePassword = function() {\n\t\tPrincipal.changePassword(ctrl.password).then(function() {\n\t\t\tAlertService.success('ACCOUNT_PASSWORD_SAVE_SUCCESS');\n\t\t}).catch(function() {\n\t\t\tAlertService.error('ACCOUNT_PASSWORD_SAVE_ERROR');\n\t\t});\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').config([\"$stateProvider\", \"adamaConstant\", function($stateProvider, adamaConstant) {\n\t$stateProvider.state('app.personal.settings', {\n\t\turl: '/settings',\n\t\ttemplateUrl: function() {\n\t\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.settings;\n\t\t},\n\t\tcontroller: 'SettingsCtrl',\n\t\tcontrollerAs: 'ctrl',\n\t\tdata: {\n\t\t\tpageTitle: 'ACCOUNT_SETTINGS'\n\t\t}\n\t});\n}]);\n\nangular.module('adama-web').config([\"$translateProvider\", function($translateProvider) {\n\t$translateProvider.translations('fr', {\n\t\t'ACCOUNT_SETTINGS': 'Mon profil',\n\t\t'ACCOUNT_SETTINGS_TITLE': 'Mon profil',\n\t\t'ACCOUNT_SETTINGS_FIRSTNAME': 'Prénom',\n\t\t'ACCOUNT_SETTINGS_FIRSTNAME_PLACEHOLDER': 'Prénom ?',\n\t\t'ACCOUNT_SETTINGS_FIRSTNAME_REQUIRED': 'Votre prénom est obligatoire.',\n\t\t'ACCOUNT_SETTINGS_FIRSTNAME_MAXLENGTH': 'Votre prénom doit être composé d\\'au plus 50 caractères.',\n\t\t'ACCOUNT_SETTINGS_LASTNAME': 'Nom de famille',\n\t\t'ACCOUNT_SETTINGS_LASTNAME_PLACEHOLDER': 'Nom de famille ?',\n\t\t'ACCOUNT_SETTINGS_LASTNAME_REQUIRED': 'Votre nom de famille est obligatoire.',\n\t\t'ACCOUNT_SETTINGS_LASTNAME_MAXLENGTH': 'Votre nom de famille doit être composé d\\'au plus 50 caractères.',\n\t\t'ACCOUNT_SETTINGS_EMAIL': 'Email',\n\t\t'ACCOUNT_SETTINGS_EMAIL_PLACEHOLDER': 'Email ?',\n\t\t'ACCOUNT_SETTINGS_EMAIL_REQUIRED': 'Votre email est obligatoire.',\n\t\t'ACCOUNT_SETTINGS_EMAIL_EMAIL': 'Votre email est invalide.',\n\t\t'ACCOUNT_SETTINGS_EMAIL_MAXLENGTH': 'Votre email doit être composé d\\'au plus 100 caractères.',\n\t\t'ACCOUNT_SETTINGS_LANGUAGE': 'Langue',\n\t\t'ACCOUNT_SETTINGS_SUBMIT': 'Enregistrer',\n\t\t'ACCOUNT_SETTINGS_SAVE_SUCCESS': 'Enregistrement du profil avec succès.',\n\t\t'ACCOUNT_SETTINGS_SAVE_ERROR': 'Impossible d\\'enregistrer le profil.'\n\t});\n\n\t$translateProvider.translations('en', {\n\t\t'ACCOUNT_SETTINGS': 'My profile',\n\t\t'ACCOUNT_SETTINGS_TITLE': 'My profile',\n\t\t'ACCOUNT_SETTINGS_FIRSTNAME': 'First name',\n\t\t'ACCOUNT_SETTINGS_FIRSTNAME_PLACEHOLDER': 'First name ?',\n\t\t'ACCOUNT_SETTINGS_FIRSTNAME_REQUIRED': 'Your first name is required.',\n\t\t'ACCOUNT_SETTINGS_FIRSTNAME_MAXLENGTH': 'Your first name cannot be longer than 50 characters.',\n\t\t'ACCOUNT_SETTINGS_LASTNAME': 'Last name',\n\t\t'ACCOUNT_SETTINGS_LASTNAME_PLACEHOLDER': 'Last name ?',\n\t\t'ACCOUNT_SETTINGS_LASTNAME_REQUIRED': 'Your last name is required.',\n\t\t'ACCOUNT_SETTINGS_LASTNAME_MAXLENGTH': 'Your last name cannot be longer than 50 characters.',\n\t\t'ACCOUNT_SETTINGS_EMAIL': 'Email',\n\t\t'ACCOUNT_SETTINGS_EMAIL_PLACEHOLDER': 'Email ?',\n\t\t'ACCOUNT_SETTINGS_EMAIL_REQUIRED': 'Your e-mail is required.',\n\t\t'ACCOUNT_SETTINGS_EMAIL_EMAIL': 'Your e-mail is invalid.',\n\t\t'ACCOUNT_SETTINGS_EMAIL_MAXLENGTH': 'Your e-mail cannot be longer than 100 characters.',\n\t\t'ACCOUNT_SETTINGS_LANGUAGE': 'Language',\n\t\t'ACCOUNT_SETTINGS_SUBMIT': 'Save',\n\t\t'ACCOUNT_SETTINGS_SAVE_SUCCESS': 'Profile successfully saved.',\n\t\t'ACCOUNT_SETTINGS_SAVE_ERROR': 'Profile could not be saved.'\n\t});\n}]);\n","'use strict';\n\nangular.module('adama-web').controller('SettingsCtrl', [\"Principal\", \"language\", \"AlertService\", \"$translate\", function(Principal, language, AlertService, $translate) {\n\tvar ctrl = this;\n\tvar copyAccount = function(account) {\n\t\t// Store the \"settings account\" in a separate variable, and not in the\n\t\t// shared \"account\" variable.\n\t\treturn {\n\t\t\tactivated: account.activated,\n\t\t\temail: account.email,\n\t\t\tfirstName: account.firstName,\n\t\t\tlangKey: account.langKey,\n\t\t\tlastName: account.lastName,\n\t\t\tlogin: account.login\n\t\t};\n\t};\n\tPrincipal.identity().then(function(account) {\n\t\tctrl.settingsAccount = copyAccount(account);\n\t});\n\tctrl.save = function() {\n\t\tPrincipal.updateAccount(ctrl.settingsAccount).then(function() {\n\t\t\treturn Principal.identity(true).then(function(account) {\n\t\t\t\tctrl.settingsAccount = copyAccount(account);\n\t\t\t\tlanguage.getCurrent().then(function(current) {\n\t\t\t\t\tif (ctrl.settingsAccount.langKey !== current) {\n\t\t\t\t\t\t$translate.use(ctrl.settingsAccount.langKey);\n\t\t\t\t\t}\n\t\t\t\t\tAlertService.success('ACCOUNT_SETTINGS_SAVE_SUCCESS');\n\t\t\t\t});\n\t\t\t});\n\t\t}).catch(function() {\n\t\t\tAlertService.error('ACCOUNT_SETTINGS_SAVE_ERROR');\n\t\t});\n\t};\n}]);\n","'use strict';\n\nangular.module('adama-web').component('arkFooter', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.arkFooter;\n\t}]\n});\n","'use strict';\n\nangular.module('adama-web').config([\"$translateProvider\", function($translateProvider) {\n\t$translateProvider.translations('fr', {\n\t\t'TOGGLE_NAVIGATION': 'Navigation',\n\t\t'USERINFO_PROFILE': 'Profil',\n\t\t'USERINFO_PASSWORD': 'Mot de passe',\n\t\t'USERINFO_SIGNOUT': 'Déconnection'\n\t});\n\n\t$translateProvider.translations('en', {\n\t\t'TOGGLE_NAVIGATION': 'Toggle navigation',\n\t\t'USERINFO_PROFILE': 'Profile',\n\t\t'USERINFO_PASSWORD': 'Password',\n\t\t'USERINFO_SIGNOUT': 'Sign out'\n\t});\n}]);\n","'use strict';\n\nangular.module('adama-web').component('arkHeader', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.arkHeader;\n\t}]\n});\n","'use strict';\n\nangular.module('adama-web').component('languageSelector', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.languageSelector;\n\t}],\n\tcontroller: [\"$rootScope\", \"$translate\", \"language\", function($rootScope, $translate, language) {\n\t\tvar ctrl = this;\n\t\tctrl.changeLanguage = function(key) {\n\t\t\t$translate.use(key);\n\t\t};\n\t\tvar updateCurrentLanguage = function() {\n\t\t\tctrl.currentLanguage = $translate.use();\n\t\t\tif (ctrl.currentLanguage.indexOf('en') === 0) {\n\t\t\t\tctrl.currentLanguage = 'us';\n\t\t\t}\n\t\t};\n\t\t$rootScope.$on('$translateChangeSuccess', function() {\n\t\t\tupdateCurrentLanguage();\n\t\t});\n\t\tupdateCurrentLanguage();\n\t\tlanguage.getSelectorData().then(function(data) {\n\t\t\tctrl.languages = data;\n\t\t});\n\t}]\n});\n","'use strict';\n\nangular.module('adama-web').component('mainNavigation', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.mainNavigation;\n\t}],\n\tcontroller: [\"$rootScope\", \"$filter\", \"$location\", \"$scope\", \"menuService\", function($rootScope, $filter, $location, $scope, menuService) {\n\t\tvar ctrl = this;\n\t\tvar translate = $filter('translate');\n\t\tvar translateLabels = function(itemList) {\n\t\t\tif (!!itemList) {\n\t\t\t\tangular.forEach(itemList, function(item) {\n\t\t\t\t\titem.label = translate(item.labelKey);\n\t\t\t\t\ttranslateLabels(item.subItems);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tctrl.menuItems = menuService.getItems();\n\t\tvar updateMenuEntries = function() {\n\t\t\ttranslateLabels(ctrl.menuItems);\n\t\t};\n\t\tupdateMenuEntries();\n\t\t$rootScope.$on('$translateChangeSuccess', updateMenuEntries);\n\t\tvar updateActiveStatus = function() {\n\t\t\tif (ctrl.menuItems) {\n\t\t\t\tangular.forEach(ctrl.menuItems, function(item) {\n\t\t\t\t\titem.active = !!item.url && $location.path().indexOf(item.url.substring(1)) === 0;\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\t$scope.$watch(function() {\n\t\t\treturn $location.path();\n\t\t}, updateActiveStatus);\n\t\t$scope.$watch(function() {\n\t\t\treturn ctrl.menuItems;\n\t\t}, updateActiveStatus);\n\t}]\n});\n","'use strict';\n\nangular.module('adama-web').provider('menuService', function() {\n\tvar menuItems = [];\n\n\tthis.addItem = function(newItem) {\n\t\tif (newItem.position !== 'right') {\n\t\t\tnewItem.position = 'left';\n\t\t}\n\t\tmenuItems.push(newItem);\n\t};\n\n\tthis.$get = [\"$rootScope\", function($rootScope) {\n\t\tvar api = {};\n\t\tangular.forEach(menuItems, function(menuItem) {\n\t\t\tif (menuItem.badge && menuItem.badge.event) {\n\t\t\t\t$rootScope.$on(menuItem.badge.event, function(event, param) {\n\t\t\t\t\tmenuItem.badge.value = param.value;\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tapi.getItems = function() {\n\t\t\treturn menuItems;\n\t\t};\n\t\treturn api;\n\t}];\n});\n","'use strict';\n\nangular.module('adama-web').component('selectAll', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.selectAll;\n\t}],\n\tbindings: {\n\t\tentityList: '<'\n\t},\n\tcontroller: function() {\n\t\tvar ctrl = this;\n\t\tctrl.isAllChecked = false;\n\t\tctrl.checkAll = function() {\n\t\t\tctrl.isAllChecked = !ctrl.isAllChecked;\n\t\t\tangular.forEach(ctrl.entityList, function(entity) {\n\t\t\t\tentity.isSelected = ctrl.isAllChecked;\n\t\t\t});\n\t\t};\n\t}\n});\n","'use strict';\n\nangular.module('adama-web').component('userInfo', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.userInfo;\n\t}],\n\tcontroller: [\"$rootScope\", \"$state\", \"Auth\", function($rootScope, $state, Auth) {\n\t\tvar ctrl = this;\n\t\tctrl.signout = function() {\n\t\t\tAuth.logout();\n\t\t\t$state.go('auth.signin');\n\t\t};\n\t\t$rootScope.$on('auth.updateAccount', function(event, data) {\n\t\t\tctrl.account = data.account;\n\t\t});\n\t}]\n});\n","'use strict';\n\nangular.module('adama-web').component('viewAttribute', {\n\ttemplateUrl: /* @ngInject */ [\"adamaConstant\", function(adamaConstant) {\n\t\treturn adamaConstant.adamaWebToolkitTemplateUrl.viewAttribute;\n\t}],\n\ttransclude: true,\n\tbindings: {\n\t\tlabelKey: '@',\n\t\tvalue: '<',\n\t\tvalueKey: '@value'\n\t},\n\tcontroller: function() {}\n});\n"],"sourceRoot":"/source/"}